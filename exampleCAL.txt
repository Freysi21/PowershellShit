OBJECT Codeunit 10016650 CO Utility
{
  OBJECT-PROPERTIES
  {
    Date=01.01.25;
    Time=12:00:00;
    Version List=LSW1Modified;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      BOUtils@1100409000 : Codeunit 99001452;
      PriceOrNetPriceCannotBeZero@1200070000 : TextConst 'ENU=Price or Net Price cannot be zero.';

    PROCEDURE CustomerOrderCreateDoc@1100409000(VAR pCOHeaderTemp@1100409000 : TEMPORARY Record 10016651;VAR pCOLineTemp@1100409001 : TEMPORARY Record 10016652;VAR pCODiscLineTemp@1100409002 : TEMPORARY Record 10016653;VAR pErrorCode@1100409026 : Code[30];VAR pErrorText@1100409006 : Text) : Boolean;
    VAR
      COLineTemp@1100409017 : TEMPORARY Record 10016652;
      COLineTemp2@1100409022 : TEMPORARY Record 10016652;
      CODiscLineTemp@1100409023 : TEMPORARY Record 10016653;
      CODiscLineTemp2@10014506 : TEMPORARY Record 10016653;
      COHeader@1100409005 : Record 10016651;
      COLine@1100409004 : Record 10016652;
      CODiscLine@1100409003 : Record 10016653;
      Store@1100409007 : Record 99001470;
      lText001@1100409008 : TextConst 'ENU=%1 ''%2'' not found.';
      lText003@1100409009 : TextConst 'ENU=%1 ''%2'' already exists.';
      MembershipCard@1100409016 : Record 99009003;
      MemberContact@1200070000 : Record 99009002;
      Item@1100409012 : Record 27;
      ItemVariant@1100409013 : Record 5401;
      ItemUOM@1100409014 : Record 5404;
      MemberAccount@10014500 : Record 99009001;
      COSetup@10014501 : Record 10016650;
      SalesHeader@10014502 : Record 36;
      RetailImage@10014503 : Record 99009063;
      RecRef@10014504 : RecordRef;
      MemberCardMgt@1100409011 : Codeunit 99009001;
      lText004@1100409015 : TextConst 'ENU=%1,%2';
      CoRmMgt@1100409027 : Codeunit 10016654;
      POSSession@10014505 : Codeunit 99008919;
      LineNo@1100409018 : Integer;
      GuidText@1100409025 : Text;
    BEGIN
      //CustomerOrderCreateDoc
      COHeader.SETRANGE("Web Trans. GUID",pCOHeaderTemp."Document Id");
      IF COHeader.FINDFIRST THEN BEGIN
        pErrorCode := '2201';
        pErrorText := STRSUBSTNO(lText003,COHeader.FIELDCAPTION("Web Trans. GUID"),pCOHeaderTemp."Document Id");
        EXIT(FALSE);
      END;

      IF (NOT pCOHeaderTemp."Ship Order") AND (NOT Store.GET(pCOHeaderTemp."Store No.")) THEN BEGIN  //LS-8707
        pErrorCode := '2202';
        pErrorText := STRSUBSTNO(lText001,Store.TABLECAPTION,pCOHeaderTemp."Store No.");
        EXIT(FALSE);
      END;
      IF (pCOHeaderTemp."Member Card No." = '') AND (pCOHeaderTemp."Member Contact No." = '') THEN BEGIN
        COSetup.GET;
        IF COSetup."Allow Anonymous Order" THEN BEGIN
          pCOHeaderTemp."Member Contact No." := COSetup."Anonymous Member Contact No.";
          pCOHeaderTemp."Member Card No." := COSetup."Anonymous Member Card No.";
        END;
      END;
      IF NOT pCOHeaderTemp."Anonymous Order" THEN
        IF NOT MemberCardMgt.GetMembershipCard(pCOHeaderTemp."Member Card No.",MembershipCard,pErrorText) THEN BEGIN
          pErrorCode := '2203';
          IF pErrorText = '' THEN
            pErrorText := STRSUBSTNO(lText001,MembershipCard.TABLECAPTION,pCOHeaderTemp."Member Card No.");
          EXIT(FALSE);
        END;

      IF NOT pCOHeaderTemp."Anonymous Order" THEN
        IF NOT MemberContact.GET(MembershipCard."Account No.",MembershipCard."Contact No.") THEN BEGIN
          pErrorCode := '2204';
          pErrorText := STRSUBSTNO(lText001,MemberContact.TABLECAPTION,STRSUBSTNO(lText004,MembershipCard."Account No.",MembershipCard."Contact No."));
          EXIT(FALSE);
        END;

      LineNo := 0;
      pCOLineTemp.RESET;
      IF pCOLineTemp.FINDSET THEN
        REPEAT
          COLineTemp2.RESET;
          COLineTemp2.DELETEALL;
          CODiscLineTemp2.RESET;
          CODiscLineTemp2.DELETEALL;
          IF pCOLineTemp."Line Type" = pCOLineTemp."Line Type"::Item THEN BEGIN
            IF NOT Item.GET(pCOLineTemp.Number) THEN BEGIN
              pErrorCode := '2220';
              pErrorText := STRSUBSTNO(lText001,Item.TABLECAPTION,pCOLineTemp.Number);
              EXIT(FALSE);
            END;
            IF pCOLineTemp."Variant Code" <> '' THEN
              IF NOT ItemVariant.GET(Item."No.",pCOLineTemp."Variant Code") THEN BEGIN
                pErrorCode := '2221';
                pErrorText := STRSUBSTNO(lText001,ItemVariant.TABLECAPTION,STRSUBSTNO(lText004,Item."No.",pCOLineTemp."Variant Code"));
                EXIT(FALSE);
              END;
            IF pCOLineTemp."Unit of Measure Code" <> '' THEN
              IF NOT ItemUOM.GET(Item."No.",pCOLineTemp."Unit of Measure Code") THEN BEGIN
                pErrorCode := '2222';
                pErrorText := STRSUBSTNO(lText001,ItemUOM.TABLECAPTION,STRSUBSTNO(lText004,Item."No.",pCOLineTemp."Unit of Measure Code"));
                EXIT(FALSE);
              END;
            IF (pCOLineTemp.Price = 0) OR (pCOLineTemp."Net Price" = 0) THEN BEGIN
              pErrorCode := '2223';
              pErrorText := STRSUBSTNO(PriceOrNetPriceCannotBeZero);
              EXIT(FALSE);
            END;

            pCOLineTemp."Vat Prod. Posting Group" := Item."VAT Prod. Posting Group";
            pCOLineTemp."Item Description" := Item.Description;
            IF pCOLineTemp."Variant Code" <> '' THEN
              pCOLineTemp."Variant Description" := ItemVariant."Description 2";
            IF (pCOLineTemp.Quantity > 1) AND (NOT Item."Scale Item") AND pCOHeaderTemp."Click And Collect Order" THEN
              SplitCOLine(pCOLineTemp,pCODiscLineTemp,COLineTemp2,CODiscLineTemp2)
            ELSE
              CopyCOLine(pCOLineTemp,pCODiscLineTemp,COLineTemp2,CODiscLineTemp2);
          END ELSE
            IF (pCOLineTemp.Quantity > 1) AND pCOHeaderTemp."Click And Collect Order" THEN
              SplitCOLine(pCOLineTemp,pCODiscLineTemp,COLineTemp2,CODiscLineTemp2)
            ELSE
              CopyCOLine(pCOLineTemp,pCODiscLineTemp,COLineTemp2,CODiscLineTemp2);
          COLineTemp2.RESET;
          IF COLineTemp2.FINDSET THEN
            REPEAT
              LineNo := LineNo + 10000;
              COLineTemp.INIT;
              COLineTemp := COLineTemp2;
              COLineTemp."Line No." := LineNo;
              COLineTemp.INSERT;
              CODiscLineTemp2.RESET;
              CODiscLineTemp2.SETRANGE("Line No.",COLineTemp2."Line No.");
              IF CODiscLineTemp2.FINDSET THEN
                REPEAT
                  CODiscLineTemp.INIT;
                  CODiscLineTemp := CODiscLineTemp2;
                  CODiscLineTemp."Line No." := COLineTemp."Line No.";
                  CODiscLineTemp.INSERT;
                UNTIL CODiscLineTemp2.NEXT = 0;
            UNTIL COLineTemp2.NEXT = 0;
        UNTIL pCOLineTemp.NEXT = 0;

      COHeader.LOCKTABLE;
      COHeader.INIT;
      COHeader."Document Id" := GetNextOrderNo;
      COHeader."Web Trans. GUID" := pCOHeaderTemp."Document Id";
      GuidText := COHeader."Web Trans. GUID";
      COHeader."Store No." := pCOHeaderTemp."Store No.";
      COHeader."Document DateTime" := CURRENTDATETIME;
      COHeader.Status := COHeader.Status::Locked;
      COHeader."Currency Code" := Store."Currency Code";
      COHeader."Currency Factor" := 1;
      COHeader."Vat Bus. Posting Group" := Store."Store VAT Bus. Post. Gr.";
      COHeader."Price Group Code" := '';
      COHeader."Customer No." := '';
      COHeader."Cust. Disc. Group" := '';
      //LS-8838 -
      //IF NOT pCOHeaderTemp."Anonymous Order" THEN BEGIN
      COHeader."Member Card No." := pCOHeaderTemp."Member Card No.";
      COHeader."Member Contact No." := pCOHeaderTemp."Member Contact No.";
      COHeader."Member Contact Name" := pCOHeaderTemp."Member Contact Name";
      IF pCOHeaderTemp."Customer No." = '' THEN
        IF MemberAccount.GET(MembershipCard."Account No.") THEN
          COHeader."Customer No." := MemberAccount."Linked To Customer No.";
      //END;
      //LS-8838 +
      COHeader."Source Type" := pCOHeaderTemp."Source Type";
      COHeader."Full Name" := pCOHeaderTemp."Full Name";
      COHeader.Address := pCOHeaderTemp.Address;
      COHeader."Address 2" := pCOHeaderTemp."Address 2";
      COHeader.City := pCOHeaderTemp.City;
      COHeader.County := pCOHeaderTemp.County;
      COHeader."Post Code" := pCOHeaderTemp."Post Code";
      COHeader."Country Region Code" := pCOHeaderTemp."Country Region Code";
      COHeader."Phone No." := pCOHeaderTemp."Phone No.";
      COHeader.Email := pCOHeaderTemp.Email;
      COHeader."House Apartment No." := pCOHeaderTemp."House Apartment No.";
      COHeader."Mobile Phone No." := pCOHeaderTemp."Mobile Phone No.";
      COHeader."Daytime Phone No." := pCOHeaderTemp."Daytime Phone No.";
      COHeader."Ship To Full Name" := pCOHeaderTemp."Ship To Full Name";
      COHeader."Ship To Address" := pCOHeaderTemp."Ship To Address";
      COHeader."Ship To Address 2" := pCOHeaderTemp."Ship To Address 2";
      COHeader."Ship To City" := pCOHeaderTemp."Ship To City";
      COHeader."Ship To County" := pCOHeaderTemp."Ship To County";
      COHeader."Ship To Post Code" := pCOHeaderTemp."Ship To Post Code";
      COHeader."Ship To Country Region Code" := pCOHeaderTemp."Ship To Country Region Code";
      COHeader."Ship To Phone No." := pCOHeaderTemp."Ship To Phone No.";
      COHeader."Ship To Email" := pCOHeaderTemp."Ship To Email";
      COHeader."Ship To House Apartment No." := pCOHeaderTemp."Ship To House Apartment No.";
      COHeader."Click And Collect Order" := pCOHeaderTemp."Click And Collect Order";
      COHeader."Anonymous Order" := pCOHeaderTemp."Anonymous Order";
      COHeader."Shipping Agent Code" := pCOHeaderTemp."Shipping Agent Code";
      COHeader."Shipping Agent Service Code" := pCOHeaderTemp."Shipping Agent Service Code";
      //COHeader."Sourcing Location" := pCOHeaderTemp."Sourcing Location"; //LS-7132
      //LS-7133 -
      COHeader."Ship Order" := pCOHeaderTemp."Ship Order";
      IF pCOHeaderTemp."Ship Order" THEN
        IF RetailImage.GET('SHIPPING') THEN BEGIN
          RecRef.GETTABLE(RetailImage);
          COHeader."Ship Order POS Flag" := POSSession.GetImageURL(RecRef.RECORDID,RetailImage.FIELDNO("Image Blob"));
        END;
      //LS-7133 +
      COHeader."Receipt No." := pCOHeaderTemp."Receipt No.";  //LS-8343
      COHeader."Trans. Store No." := pCOHeaderTemp."Trans. Store No.";  //LS-8711
      COHeader."Trans. Terminal No." := pCOHeaderTemp."Trans. Terminal No.";  //LS8711
      //LS-8813 -
      COHeader."Created at Store" := pCOHeaderTemp."Created at Store";
      COHeader."Inventory Transfer" := pCOHeaderTemp."Inventory Transfer";
      IF pCOHeaderTemp."Inventory Transfer" OR (NOT Store.FindStore(pCOHeaderTemp."Sourcing Location",Store)) THEN
        COHeader."Sourcing Location" := pCOHeaderTemp."Sourcing Location";
      //LS-8813 +
      OnBeforeInsertCustomerOrderHeader(COHeader); //LS-7898
      //LS-8701 COHeader.INSERT;
      COHeader.INSERT(TRUE);  //LS-8701

      ////LS-7133
      ////LS-5986 -
      ////LS-7133 COSetup.GET;
      ////LS-7133 IF (COHeader."Sales Order No." <> '') AND (NOT COSetup."Use Scheduler to Create SO") AND (NOT COHeader."Click And Collect Order") THEN BEGIN
      ////LS-7133 IF ShouldCreateSalesOrder(COHeader) THEN BEGIN
      ////LS-7133   CLEAR(SalesHeader);
      ////LS-7133   COHeader.CreateSalesOrder(COHeader,SalesHeader,pErrorText);
      ////LS-7133   COHeader."Sales Order No." := SalesHeader."No.";
      ////LS-7133   COHeader.MODIFY;
      ////LS-7133 END;
      ////LS-5986 +

      COLineTemp.RESET;
      IF COLineTemp.FINDSET THEN
        REPEAT
          COLine.INIT;
          COLine := COLineTemp;
          COLine."Document Id" := COHeader."Document Id";
          OnBeforeInsertCustomerOrderLine(COLine);
          //LS-8701 COLine.INSERT;
          COLine.INSERT(TRUE);  //LS-8701
        UNTIL COLineTemp.NEXT = 0;

      CODiscLineTemp.RESET;
      IF CODiscLineTemp.FINDSET THEN
        REPEAT
          CODiscLine.INIT;
          CODiscLine := CODiscLineTemp;
          CODiscLine."Document Id" := COHeader."Document Id";
          OnBeforeInsertCustomerOrderDiscountLine(CODiscLine);
          //LS-8701 CODiscLine.INSERT;
          CODiscLine.INSERT(TRUE);  //LS-8701
        UNTIL CODiscLineTemp.NEXT = 0;

      CreateReservationEntry(COHeader."Document Id",COLineTemp,Store);

      COHeader.Status := COHeader.Status::Ready;
      COHeader.MODIFY;

      pCOHeaderTemp := COHeader;

      //LS-7133 -
      COSetup.GET;
      IF ShouldCreateSalesOrder(COHeader) THEN BEGIN
        CLEAR(SalesHeader);
        COHeader.CreateSalesDocument(pCOHeaderTemp,pCOLineTemp,pCODiscLineTemp,SalesHeader,pErrorText);
        COHeader."Sales Order No." := SalesHeader."No.";
        COHeader.MODIFY;
      END;
      //LS-7133 +

      //LS-8998
      //LS-9324 IF pCOHeaderTemp."Click And Collect Order" OR (pCOHeaderTemp."Ship Order" AND NOT pCOHeaderTemp."Inventory Transfer") THEN
      IF pCOHeaderTemp."Click And Collect Order" THEN  //LS-9324
        IF NOT CoRmMgt.CreateRMForPick(COHeader."Document Id",pErrorCode,pErrorText) THEN
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE CustomerOrderPayment@10014500(VAR pCOHeaderTemp@10014503 : TEMPORARY Record 10016651;VAR pCOPaymentTemp@10014502 : TEMPORARY Record 10016658;VAR pErrorCode@10014501 : Code[30];VAR pErrorText@10014500 : Text) : Boolean;
    VAR
      COPayment@10014504 : Record 10016658;
      lText001@10014505 : TextConst 'ENU=Could not create payment line %1 for Customer order %2';
      TenderType@10014506 : Record 99001462;
      POSFunctionalityProfile@10014514 : Record 99001515;
      Store@10014516 : Record 99001470;
      POSMemberMgt@10014508 : Codeunit 99009006;
      ValidationText@10014517 : Text;
      AvailablePoints@10014507 : Decimal;
      PointsBalance@10014509 : Decimal;
      PointsUsedInThisTransaction@10014510 : Decimal;
      MemberPointBalanceToLow@10014511 : TextConst 'ENU=Current Member point balance is too low';
      FunctionalityProfileMissing@10014515 : TextConst 'ENU=Functionality Profile not set for Store %1';
    BEGIN
      pCOPaymentTemp.RESET;
      IF pCOPaymentTemp.FINDSET THEN REPEAT
        COPayment.LOCKTABLE;
        COPayment.INIT;
        COPayment := pCOPaymentTemp;
        COPayment."Document Id" := pCOHeaderTemp."Document Id";
        COPayment."Store No." := pCOHeaderTemp."Store No.";
        //LS-8704 -
        IF TenderType.GET(COPayment."Store No.",COPayment."Tender Type") THEN
          IF TenderType."Function" = TenderType."Function"::Member THEN BEGIN
            ValidationText := ValidateMemberCard(pCOHeaderTemp,COPayment."Card or Customer number");
            IF ValidationText = '' THEN BEGIN
              Store.GET(pCOHeaderTemp."Store No.");
              IF NOT POSFunctionalityProfile.GET(Store."Functionality Profile") THEN BEGIN
                pErrorCode := '2251';
                pErrorText := STRSUBSTNO(FunctionalityProfileMissing,Store."No.");
                EXIT(FALSE);
              END;
              POSMemberMgt.SetPOSFunctionalityProfile(POSFunctionalityProfile);
              POSMemberMgt.GetCurrentAvailablePoints(COPayment."Card or Customer number",PointsBalance,PointsUsedInThisTransaction,AvailablePoints);
              IF AvailablePoints < COPayment."Pre Approved Amount" THEN BEGIN
                pErrorCode := '2252';
                pErrorText := MemberPointBalanceToLow;
                EXIT(FALSE);
              END ELSE BEGIN
                SalesOrder_LoyaltyPoint_Posting(pCOHeaderTemp,COPayment);
              END;
            END ELSE BEGIN
              pErrorCode := '2253';
              pErrorText := ValidationText;
              EXIT(FALSE);
            END;
            COPayment."Loyalty Point payment" := TRUE;
          END;

        IF COPayment."Currency Code" <> '' THEN BEGIN
          COPayment."Pre Approved Amount LCY" := COPayment."Pre Approved Amount" * COPayment."Currency Factor";
          COPayment."Finalised Amount LCY" := COPayment."Finalised Amount" * COPayment."Currency Factor";
        END ELSE BEGIN
          COPayment."Pre Approved Amount LCY" := COPayment."Pre Approved Amount";
          COPayment."Finalised Amount LCY" := COPayment."Finalised Amount";
        END;
        //LS-8704 +
        OnBeforeInsertCustomerOrderPaymentLine(COPayment);
        IF NOT COPayment.INSERT THEN BEGIN
          pErrorCode := '2224';
          pErrorText := STRSUBSTNO(lText001,pCOPaymentTemp."Line No.",pCOHeaderTemp."Document Id");
          EXIT(FALSE);
        END;
      UNTIL pCOPaymentTemp.NEXT = 0;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CopyCOLine@1100409020(VAR pCOLineIn@1100409001 : TEMPORARY Record 10016652;VAR pCODiscLineIn@1100409000 : TEMPORARY Record 10016653;VAR pCOLineOut@1100409003 : TEMPORARY Record 10016652;VAR pCODiscLineOut@1100409002 : TEMPORARY Record 10016653);
    VAR
      LineNo@1100409008 : Integer;
      LineIndex@1100409006 : Integer;
      MaxLineNo@1100409005 : Integer;
      LineFactor@1100409004 : Decimal;
    BEGIN
      //CopyCOLine
      pCOLineOut.INIT;
      pCOLineOut := pCOLineIn;
      LineNo := LineNo + 1;
      pCOLineOut."Line No." := LineNo;
      pCOLineOut."Original Line No." := pCOLineIn."Line No.";
      pCOLineOut.INSERT;

      pCODiscLineIn.RESET;
      pCODiscLineIn.SETRANGE("Line No.",pCOLineIn."Line No.");
      IF pCODiscLineIn.FINDSET THEN
        REPEAT
          pCODiscLineOut.INIT;
          pCODiscLineOut := pCODiscLineIn;
          pCODiscLineOut."Line No." := pCOLineOut."Line No.";
          pCODiscLineOut.INSERT;
        UNTIL pCODiscLineIn.NEXT = 0;
    END;

    LOCAL PROCEDURE SplitCOLine@1100409023(VAR pCOLineIn@1100409001 : TEMPORARY Record 10016652;VAR pCODiscLineIn@1100409000 : TEMPORARY Record 10016653;VAR pCOLineOut@1100409003 : TEMPORARY Record 10016652;VAR pCODiscLineOur@1100409002 : TEMPORARY Record 10016653);
    VAR
      COLineTemp2@1100409009 : TEMPORARY Record 10016652;
      CODiscLineTemp2@1100409007 : TEMPORARY Record 10016653;
      LineNo@1100409008 : Integer;
      LineIndex@1100409006 : Integer;
      MaxLineNo@1100409005 : Integer;
      LineFactor@1100409004 : Decimal;
    BEGIN
      //SplitCOLine
      pCOLineOut.INIT;
      pCOLineOut := pCOLineIn;
      COLineTemp2 := pCOLineIn;
      MaxLineNo := pCOLineIn.Quantity;
      LineFactor := 1 / MaxLineNo;
      FOR LineIndex := 1 TO MaxLineNo DO BEGIN
        LineNo := LineNo + 1;
        pCOLineOut."Line No." := LineNo;
        pCOLineOut.Quantity := 1;
        IF LineIndex < MaxLineNo THEN BEGIN
          pCOLineOut."Discount Amount" := ROUND(pCOLineIn."Discount Amount" * LineFactor);
          pCOLineOut."Net Amount" := ROUND(pCOLineIn."Net Amount" * LineFactor);
          pCOLineOut."Vat Amount" := ROUND(pCOLineIn."Vat Amount" * LineFactor);
          pCOLineOut.Amount := ROUND(pCOLineIn.Amount * LineFactor);
          COLineTemp2."Discount Amount" := COLineTemp2."Discount Amount" - pCOLineOut."Discount Amount";
          COLineTemp2."Net Amount" := COLineTemp2."Net Amount" - pCOLineOut."Net Amount";
          COLineTemp2."Vat Amount" := COLineTemp2."Vat Amount" - pCOLineOut."Vat Amount";
          COLineTemp2.Amount := COLineTemp2.Amount - pCOLineOut.Amount;
        END ELSE BEGIN
          pCOLineOut."Discount Amount" := COLineTemp2."Discount Amount";
          pCOLineOut."Net Amount" := COLineTemp2."Net Amount";
          pCOLineOut."Vat Amount" := COLineTemp2."Vat Amount";
          pCOLineOut.Amount := COLineTemp2.Amount;
        END;
        pCOLineOut."Original Line No." := pCOLineIn."Line No.";
        pCOLineOut.INSERT;
        pCODiscLineIn.RESET;
        pCODiscLineIn.SETRANGE("Line No.",pCOLineIn."Line No.");
        IF pCODiscLineIn.FINDSET THEN
          REPEAT
            IF LineIndex = 1 THEN BEGIN
              CODiscLineTemp2.INIT;
              CODiscLineTemp2 := pCODiscLineIn;
              CODiscLineTemp2.INSERT;
            END;
            CODiscLineTemp2.GET(pCODiscLineIn."Document Id",pCODiscLineIn."Line No.",pCODiscLineIn."Entry No.");
            pCODiscLineOur.INIT;
            pCODiscLineOur := pCODiscLineIn;
            pCODiscLineOur."Line No." := pCOLineOut."Line No.";
            IF LineIndex < MaxLineNo THEN BEGIN
              pCODiscLineOur."Discount Amount" := ROUND(pCODiscLineOur."Discount Amount" * LineFactor);
              CODiscLineTemp2."Discount Amount" := CODiscLineTemp2."Discount Amount" - pCODiscLineOur."Discount Amount";
            END ELSE
              pCODiscLineOur."Discount Amount" := CODiscLineTemp2."Discount Amount";
            pCODiscLineOur.INSERT;
            CODiscLineTemp2.MODIFY;
          UNTIL pCODiscLineIn.NEXT = 0;
      END;
    END;

    PROCEDURE ConvertProductIdToItemNo@1100409001(VAR pCOLineTemp@10014500 : TEMPORARY Record 10016652);
    VAR
      WINCProduct@1100409001 : Record 10012874;
    BEGIN
      //ConvertProductIdToItem
      pCOLineTemp.RESET;
      IF pCOLineTemp.FINDSET THEN
        REPEAT
          IF pCOLineTemp."Line Type" = pCOLineTemp."Line Type"::Item THEN
            IF WINCProduct.GET(pCOLineTemp.Number) THEN BEGIN
              pCOLineTemp.Number := WINCProduct."Item No.";
              pCOLineTemp.MODIFY;
            END;
        UNTIL pCOLineTemp.NEXT = 0;
    END;

    PROCEDURE ConvertItemNoToProductId@1200070000(VAR pCOLineTemp@1100409000 : TEMPORARY Record 10016652);
    VAR
      WINCProduct@1100409001 : Record 10012874;
    BEGIN
      //ConvertItemNoToProductId
      WINCProduct.RESET;
      WINCProduct.SETCURRENTKEY("Item No.");
      pCOLineTemp.RESET;
      IF pCOLineTemp.FINDSET THEN
        REPEAT
          IF pCOLineTemp."Line Type" = pCOLineTemp."Line Type"::Item THEN BEGIN
            WINCProduct.SETRANGE("Item No.",pCOLineTemp.Number);
            IF WINCProduct.FINDFIRST THEN BEGIN
              pCOLineTemp.Number := FORMAT(WINCProduct.Id);
              pCOLineTemp.MODIFY;
            END;
          END;
        UNTIL pCOLineTemp.NEXT = 0;
    END;

    LOCAL PROCEDURE GetNextOrderNo@1100409018() : Code[40];
    VAR
      COSetup@1100409002 : Record 10016650;
      NoSeriesMgt@1100409001 : Codeunit 396;
      OrderNo@1100409000 : Code[40];
    BEGIN
      //GetNextOrderNo
      COSetup.GET;
      NoSeriesMgt.InitSeries(COSetup."Order Nos.",'',TODAY,OrderNo,COSetup."Order Nos.");
      EXIT(OrderNo);
    END;

    PROCEDURE GetDocListToPick@1100409002(pStoreNo@1100409001 : Code[10];pMemberCardNo@1100409002 : Text[100];pOrderType@10014500 : 'All,Click&Collect';VAR pCOHeaderTemp@1100409000 : TEMPORARY Record 10016651);
    BEGIN
      //GetDocListToPick
      GetDocList(0,pStoreNo,pMemberCardNo,pOrderType,pCOHeaderTemp);
    END;

    PROCEDURE GetDocListToCollect@1100409007(pStoreNo@1100409001 : Code[10];pMemberCardNo@1100409002 : Text[100];pOrderType@10014500 : 'All,Click&Collect';VAR pCOHeaderTemp@1100409000 : TEMPORARY Record 10016651);
    BEGIN
      //GetDocListToCollect
      GetDocList(1,pStoreNo,pMemberCardNo,pOrderType,pCOHeaderTemp);
    END;

    PROCEDURE GetDocListToPutBack@1100409009(pStoreNo@1100409001 : Code[10];pMemberCardNo@1100409002 : Text[100];pOrderType@10014500 : 'All,Click&Collect';VAR pCOHeaderTemp@1100409000 : TEMPORARY Record 10016651);
    BEGIN
      //GetDocListToPutBack
      GetDocList(2,pStoreNo,pMemberCardNo,pOrderType,pCOHeaderTemp);
    END;

    PROCEDURE GetDocListToLookup@10014519(pStoreNo@1100409001 : Code[10];pMemberCardNo@1100409002 : Text[100];pOrderType@10014500 : 'All,Click&Collect';VAR pCOHeaderTemp@1100409000 : TEMPORARY Record 10016651);
    BEGIN
      //GetDocListToLookup
      //LS-8706
      GetDocList(3,pStoreNo,pMemberCardNo,pOrderType,pCOHeaderTemp);
    END;

    PROCEDURE GetDocList@1100409003(pDocStatus@1100409004 : 'To Pick,To Collect,To Put Back,Lookup';pStoreNo@1100409001 : Code[10];pMemberCardNo@1100409002 : Text[100];pOrderType@10014500 : 'All,Click&Collect';VAR pCOHeaderTemp@1100409000 : TEMPORARY Record 10016651);
    VAR
      COHeader@1100409003 : Record 10016651;
      ListHeader@1100409005 : Boolean;
    BEGIN
      //GetDocList
      COHeader.RESET;
      COHeader.SETCURRENTKEY("Store No.",Status);
      COHeader.SETRANGE("Store No.",pStoreNo);
      COHeader.SETRANGE(Status,COHeader.Status::Ready);
      IF pMemberCardNo <> '' THEN
        COHeader.SETRANGE("Member Card No.",pMemberCardNo);
      IF pOrderType = pOrderType::"Click&Collect" THEN
        COHeader.SETRANGE("Click And Collect Order",TRUE);
      IF COHeader.FINDSET THEN
        REPEAT
          ListHeader := FALSE;
          IF pDocStatus = pDocStatus::"To Pick" THEN BEGIN
            COHeader.CALCFIELDS("Lines To Pick");
            IF COHeader."Lines To Pick" > 0 THEN
              ListHeader := TRUE;
            //LS-8813 -
            IF NOT TransferOrderReady(COHeader) THEN
              ListHeader := FALSE
            //LS-8813 +
          END ELSE
          //LS-8706 -
          IF pDocStatus = pDocStatus::Lookup THEN BEGIN
            COHeader.CALCFIELDS("Lines To Pick","Lines To Collect","Lines To Put Back");
            IF (COHeader."Lines To Pick" + COHeader."Lines To Collect" + COHeader."Lines To Put Back") > 0 THEN
              ListHeader := TRUE;
          END ELSE
          //LS-8706 +
            IF pDocStatus = pDocStatus::"To Collect" THEN BEGIN
              COHeader.CALCFIELDS("Lines To Collect");
              IF COHeader."Lines To Collect" > 0 THEN
                ListHeader := TRUE;
            END ELSE BEGIN
              COHeader.CALCFIELDS("Lines To Put Back");
              IF COHeader."Lines To Put Back" > 0 THEN
                ListHeader := TRUE;
            END;
          IF ListHeader THEN BEGIN
            pCOHeaderTemp.INIT;
            pCOHeaderTemp := COHeader;
            pCOHeaderTemp.INSERT;
          END;
        UNTIL COHeader.NEXT = 0;
    END;

    PROCEDURE GetFilteredDocList@10014523(VAR pCOHeaderTemp@1100409000 : TEMPORARY Record 10016651;IncludePostedCustomerOrders@10014504 : Boolean;VAR pErrorCode@10014502 : Code[30];VAR pErrorText@10014500 : Text) : Boolean;
    VAR
      COHeader@1100409003 : Record 10016651;
      PostedCOHeader@10014505 : Record 10016655;
      TransferHeader@10014501 : Record 5740;
      NoCustomerOrderFound@10014503 : TextConst 'ENU=No Customer Order was found matching the applied filter';
    BEGIN
      //LS-8707
      COHeader.RESET;
      COHeader.SETCURRENTKEY("Store No.",Status);
      IF pCOHeaderTemp."Store No." <> '' THEN
        COHeader.SETFILTER("Store No.",'%1','*'+pCOHeaderTemp."Store No."+'*');
      COHeader.SETRANGE(Status,pCOHeaderTemp.Status::Ready);
      COHeader.SETRANGE("Click And Collect Order",TRUE);
      IF pCOHeaderTemp."Document DateTime" <> 0DT THEN
        COHeader.SETFILTER("Document DateTime",'>=%1',pCOHeaderTemp."Document DateTime");
      IF pCOHeaderTemp."Full Name" <> '' THEN
        COHeader.SETFILTER("Full Name",'%1','@*'+pCOHeaderTemp."Full Name"+'*');
      IF pCOHeaderTemp."Document Id" <> '' THEN
        COHeader.SETFILTER("Document Id",'%1','*'+pCOHeaderTemp."Document Id"+'*');
      IF pCOHeaderTemp."Phone No." <> '' THEN
        COHeader.SETFILTER("Phone No.",'%1','@*'+pCOHeaderTemp."Phone No."+'*');
      IF pCOHeaderTemp.Email <> '' THEN
        COHeader.SETFILTER(Email,'%1','@*'+pCOHeaderTemp.Email+'*');
      //LS-9074-
      IF pCOHeaderTemp."Member Card No." <> '' THEN
        COHeader.SETFILTER("Member Card No.",'%1','@*'+pCOHeaderTemp."Member Card No."+'*');
      //LS-9074+
      //LS-9171-
      IF pCOHeaderTemp."Inventory Transfer" = TRUE THEN BEGIN
        COHeader.SETFILTER("Created at Store",'%1','@*'+pCOHeaderTemp."Created at Store"+'*');
        COHeader.SETFILTER("Inventory Transfer", 'true');
      END;
      //LS-9171+
      pCOHeaderTemp.RESET;
      pCOHeaderTemp.DELETEALL;
      IF COHeader.FINDSET THEN
        REPEAT
          pCOHeaderTemp.INIT;
          pCOHeaderTemp := COHeader;
          COHeader.CALCFIELDS("Lines To Collect","Lines To Put Back","Lines To Pick");
          IF COHeader."Lines To Pick" > 0 THEN
            pCOHeaderTemp."Status Info" := pCOHeaderTemp."Status Info"::"Ready for Picking"
          ELSE IF COHeader."Lines To Collect" > 0 THEN
            pCOHeaderTemp."Status Info" := pCOHeaderTemp."Status Info"::"Ready for Collect"
          ELSE IF COHeader."Lines To Put Back" > 0 THEN
            pCOHeaderTemp."Status Info" := pCOHeaderTemp."Status Info"::"Ready for Putback";


          TransferHeader.SETRANGE("Customer Order Ext. Doc. No.",COHeader."Document Id");
          TransferHeader.SETRANGE("Store-to",COHeader."Store No.");  //LS-8813
          TransferHeader.SETRANGE("Retail Status",TransferHeader."Retail Status"::Sent);  //LS-8813
          IF NOT TransferHeader.ISEMPTY THEN
            pCOHeaderTemp."Status Info" := pCOHeaderTemp."Status Info"::"Waiting for Transfer";

          pCOHeaderTemp.INSERT;
        UNTIL COHeader.NEXT = 0;

      IF IncludePostedCustomerOrders THEN BEGIN
        PostedCOHeader.RESET;
        PostedCOHeader.SETCURRENTKEY("Store No.",Status);
        COHeader.COPYFILTER("Store No.",PostedCOHeader."Store No.");
        COHeader.COPYFILTER("Document DateTime",PostedCOHeader."Document DateTime");
        COHeader.COPYFILTER("Full Name",PostedCOHeader.FullName);
        COHeader.COPYFILTER("Document Id",PostedCOHeader."Document Id");
        COHeader.COPYFILTER("Phone No.",PostedCOHeader.PhoneNo);
        COHeader.COPYFILTER(Email,PostedCOHeader.Email);
        IF PostedCOHeader.FINDSET THEN REPEAT
          pCOHeaderTemp.INIT;
          pCOHeaderTemp.TRANSFERFIELDS(PostedCOHeader);
          pCOHeaderTemp."Status Info" := pCOHeaderTemp."Status Info"::Delivered;
          pCOHeaderTemp.INSERT;
        UNTIL PostedCOHeader.NEXT = 0;
      END;

      IF pCOHeaderTemp.ISEMPTY THEN BEGIN
        pErrorCode := '2401';
        pErrorText := NoCustomerOrderFound;
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ReserveOrderForPicking@1100409004(pDocumentId@1100409002 : Code[40];pTerminalNo@1100409004 : Code[10];VAR pCOHeaderTemp@1100409006 : TEMPORARY Record 10016651;VAR pCOLineTemp@1100409003 : TEMPORARY Record 10016652;VAR pCODiscLineTemp@1100409005 : TEMPORARY Record 10016653;VAR pCOPaymentTemp@10014500 : TEMPORARY Record 10016658;VAR pErrorCode@1100409001 : Code[30];VAR pErrorText@1100409000 : Text) : Boolean;
    BEGIN
      //ReserveOrderForPicking
      //LS-7133 EXIT(ReserveOrder(0,pDocumentId,pTerminalNo,pCOHeaderTemp,pCOLineTemp,pCODiscLineTemp,pErrorCode,pErrorText));
      EXIT(ReserveOrder(0,pDocumentId,pTerminalNo,pCOHeaderTemp,pCOLineTemp,pCODiscLineTemp,pCOPaymentTemp,pErrorCode,pErrorText));  //LS-7133
    END;

    PROCEDURE ReserveOrderForCollect@1100409027(pDocumentId@1100409002 : Code[40];pTerminalNo@1100409004 : Code[10];VAR pCOHeaderTemp@1100409006 : TEMPORARY Record 10016651;VAR pCOLineTemp@1100409003 : TEMPORARY Record 10016652;VAR pCODiscLineTemp@1100409005 : TEMPORARY Record 10016653;VAR pCOPaymentTemp@10014500 : TEMPORARY Record 10016658;VAR pErrorCode@1100409001 : Code[30];VAR pErrorText@1100409000 : Text) : Boolean;
    BEGIN
      //ReserveOrderForCollect
      //LS-7133 EXIT(ReserveOrder(1,pDocumentId,pTerminalNo,pCOHeaderTemp,pCOLineTemp,pCODiscLineTemp,pErrorCode,pErrorText));
      EXIT(ReserveOrder(1,pDocumentId,pTerminalNo,pCOHeaderTemp,pCOLineTemp,pCODiscLineTemp,pCOPaymentTemp,pErrorCode,pErrorText));  //LS-7133
    END;

    PROCEDURE ReserveOrderForPutBack@1100409029(pDocumentId@1100409002 : Code[40];pTerminalNo@1100409004 : Code[10];VAR pCOHeaderTemp@1100409006 : TEMPORARY Record 10016651;VAR pCOLineTemp@1100409003 : TEMPORARY Record 10016652;VAR pCODiscLineTemp@1100409005 : TEMPORARY Record 10016653;VAR pCOPaymentTemp@10014500 : TEMPORARY Record 10016658;VAR pErrorCode@1100409001 : Code[30];VAR pErrorText@1100409000 : Text) : Boolean;
    BEGIN
      //ReserveOrderForPutBack
      //LS-7133 EXIT(ReserveOrder(2,pDocumentId,pTerminalNo,pCOHeaderTemp,pCOLineTemp,pCODiscLineTemp,pErrorCode,pErrorText));
      EXIT(ReserveOrder(2,pDocumentId,pTerminalNo,pCOHeaderTemp,pCOLineTemp,pCODiscLineTemp,pCOPaymentTemp,pErrorCode,pErrorText));  //LS-7133
    END;

    PROCEDURE ReserveOrder@1100409019(pDocStatus@1100409017 : 'To Pick,To Collect,To Put Back,Lookup';pDocumentId@1100409002 : Code[40];pTerminalNo@1100409004 : Code[10];VAR pCOHeaderTemp@1100409021 : TEMPORARY Record 10016651;VAR pCOLineTemp@1100409003 : TEMPORARY Record 10016652;VAR pCODiscLineTemp@1100409019 : TEMPORARY Record 10016653;VAR pCOPaymentTemp@10014500 : TEMPORARY Record 10016658;VAR pErrorCode@1100409001 : Code[30];VAR pErrorText@1100409000 : Text) : Boolean;
    VAR
      COHeader@1100409005 : Record 10016651;
      lText001@10014502 : TextConst 'ENU=%1 ''%2'' not found.';
      lText005@10014503 : TextConst 'ENU=%1 ''%2'' has already been processed';
      COHeader2@1100409015 : Record 10016651;
      COLine@1100409014 : Record 10016652;
      CODiscLine@1100409020 : Record 10016653;
      COPayment@10014501 : Record 10016658;
      POSTerminal@1100409012 : Record 99001471;
      lText006@10014504 : TextConst 'ENU=%1 ''%2'' is already reserved by %3 ''%4''';
      lText007@1100409013 : TextConst 'ENU=%1 ''%2'' has no lines to process';
      lText008@1100409016 : TextConst 'ENU=Unable to reserve %1 ''%2''';
      PostedCOHeader@1000000000 : Record 10016655;
      NumberOfLines@1100409018 : Integer;
      lText009@1100409022 : TextConst 'ENU=%1 ''%2'' belongs to store %3';
    BEGIN
      //ReserveOrder
      IF NOT COHeader.GET(pDocumentId) THEN
        IF PostedCOHeader.GET(pDocumentId) THEN BEGIN
          pErrorCode := '2241';
          pErrorText := STRSUBSTNO(lText005,COHeader.TABLECAPTION,pDocumentId);
          EXIT(FALSE);
        END ELSE BEGIN
          pErrorCode := '2240';
          pErrorText := STRSUBSTNO(lText001,COHeader.TABLECAPTION,pDocumentId);
          EXIT(FALSE);
        END;

      IF NOT POSTerminal.GET(pTerminalNo) THEN BEGIN
        pErrorCode := '2246';
        pErrorText := STRSUBSTNO(lText001,POSTerminal.TABLECAPTION,pTerminalNo);
        EXIT(FALSE);
      END;

      IF POSTerminal."Store No." <> COHeader."Store No." THEN BEGIN
        pErrorCode := '2247';
        pErrorText := STRSUBSTNO(lText009,COHeader.TABLECAPTION,pDocumentId,COHeader."Store No.");
        EXIT(FALSE);
      END;

      IF COHeader.Status = COHeader.Status::Finish THEN BEGIN
        pErrorCode := '2241';
        pErrorText := STRSUBSTNO(lText005,COHeader.TABLECAPTION,pDocumentId);
        EXIT(FALSE);
      END;

      IF (COHeader.Status = COHeader.Status::Locked) AND (pTerminalNo <> COHeader."Terminal No.") THEN BEGIN
        pErrorCode := '2242';
        pErrorText := STRSUBSTNO(lText006,COHeader.TABLECAPTION,pDocumentId,POSTerminal.TABLECAPTION,COHeader."Terminal No.");
        EXIT(FALSE);
      END;

      NumberOfLines := 0;
      IF pDocStatus = pDocStatus::"To Pick" THEN
        BEGIN
          COHeader.CALCFIELDS("Lines To Pick");
          NumberOfLines := COHeader."Lines To Pick";
        END
      ELSE
        //LS-8706 -
        IF pDocStatus = pDocStatus::Lookup THEN BEGIN
          COHeader.CALCFIELDS("Lines To Collect","Lines To Put Back","Lines To Pick");
          NumberOfLines := COHeader."Lines To Collect" + COHeader."Lines To Put Back" + COHeader."Lines To Pick";
        END ELSE
        //LS-8706 +
          IF pDocStatus = pDocStatus::"To Collect" THEN BEGIN
            COHeader.CALCFIELDS("Lines To Collect");
            NumberOfLines := COHeader."Lines To Collect";
          END ELSE BEGIN
            COHeader.CALCFIELDS("Lines To Put Back");
            NumberOfLines := COHeader."Lines To Put Back";
          END;

      IF NumberOfLines = 0 THEN BEGIN
        pErrorCode := '2243';
        pErrorText := STRSUBSTNO(lText007,COHeader.TABLECAPTION,pDocumentId);
        EXIT(FALSE);
      END;

      COHeader2 := COHeader;
      COHeader.LOCKTABLE;
      COHeader.GET(pDocumentId);
      IF pDocStatus = pDocStatus::"To Pick" THEN
        COHeader.CALCFIELDS("Lines To Pick")
      ELSE IF pDocStatus = pDocStatus::"To Collect" THEN
        COHeader.CALCFIELDS("Lines To Collect")
      ELSE IF pDocStatus = pDocStatus::Lookup THEN  //LS-8706
        COHeader.CALCFIELDS("Lines To Collect","Lines To Put Back","Lines To Pick")  //LS-8706
      ELSE
        COHeader.CALCFIELDS("Lines To Put Back");
      IF FORMAT(COHeader) <> FORMAT(COHeader2) THEN BEGIN
        pErrorCode := '2244';
        pErrorText := STRSUBSTNO(lText008,COHeader.TABLECAPTION,pDocumentId);
        EXIT(FALSE);
      END;

      COHeader.Status := COHeader.Status::Locked;
      COHeader."Terminal No." := pTerminalNo;
      COHeader.MODIFY;
      pCOHeaderTemp.INIT;
      pCOHeaderTemp := COHeader;
      pCOHeaderTemp.INSERT;

      COLine.RESET;
      COLine.SETRANGE("Document Id",COHeader."Document Id");
      IF pDocStatus = pDocStatus::"To Pick" THEN
        COLine.SETRANGE(Status,COLine.Status::"To Pick")
      ELSE IF pDocStatus = pDocStatus::"To Collect" THEN
        COLine.SETRANGE(Status,COLine.Status::"To Collect")
      ELSE IF pDocStatus = pDocStatus::Lookup THEN  //LS-8706
        COLine.SETRANGE(Status)  //LS-8706
      ELSE
        COLine.SETRANGE(Status,COLine.Status::"To Put Back");

      IF COLine.FINDSET THEN
        REPEAT
          pCOLineTemp.INIT;
          pCOLineTemp := COLine;
          pCOLineTemp.INSERT;
          //LS-7133 IF pDocStatus = pDocStatus::"To Collect" THEN BEGIN
          IF (pDocStatus = pDocStatus::"To Collect") OR ((pDocStatus = pDocStatus::"To Pick") AND COHeader."Ship Order") THEN BEGIN  //LS-7133
            CODiscLine.RESET;
            CODiscLine.SETRANGE("Document Id",COLine."Document Id");
            CODiscLine.SETRANGE("Line No.",COLine."Line No.");
            IF CODiscLine.FINDSET THEN
              REPEAT
                pCODiscLineTemp.INIT;
                pCODiscLineTemp := CODiscLine;
                pCODiscLineTemp.INSERT;
              UNTIL CODiscLine.NEXT = 0;
          END;
        UNTIL COLine.NEXT = 0;

      //LS-7133 -
      COPayment.RESET;
      COPayment.SETRANGE("Document Id",COHeader."Document Id");
      IF COPayment.FINDSET THEN
        REPEAT
          pCOPaymentTemp.INIT;
          pCOPaymentTemp := COPayment;
          pCOPaymentTemp.INSERT;
        UNTIL COPayment.NEXT = 0;
      //LS-7133 +

      EXIT(TRUE);
    END;

    PROCEDURE UpdateOrder@1100409005(pDocumentId@1100409002 : Code[40];pTerminalNo@1100409004 : Code[10];pCollectLocInStore@1100409020 : Text[20];pReceiptNo@1100409017 : Code[20];VAR pCOLineTemp@1100409003 : TEMPORARY Record 10016652;VAR pErrorCode@1100409001 : Code[30];VAR pErrorText@1100409000 : Text) : Boolean;
    VAR
      COHeader@1100409005 : Record 10016651;
      lText001@1100409009 : TextConst 'ENU=%1 ''%2'' not found.';
      lText005@10014503 : TextConst 'ENU=%1 ''%2'' has to be reserved for %3 ''%4''';
      COHeader2@1100409015 : Record 10016651;
      COLine@1100409014 : Record 10016652;
      lText008@1100409016 : TextConst 'ENU=Unable to update %1 ''%2''';
      POSTerminal@10014501 : Record 99001471;
      OmniUtility@1100409019 : Codeunit 10016653;
      CoRmMgt@1100409021 : Codeunit 10016654;
      AtFirstPick@10014504 : Boolean;
      LinesCollected@10014502 : Boolean;
      PostInventoryTransfer@10014500 : Boolean;
    BEGIN
      //UpdateOrder
      IF NOT COHeader.GET(pDocumentId) THEN BEGIN
        pErrorCode := '2240';
        pErrorText := STRSUBSTNO(lText001,COHeader.TABLECAPTION,pDocumentId);
        EXIT(FALSE);
      END;

      IF (COHeader.Status <> COHeader.Status::Locked) OR (pTerminalNo <> COHeader."Terminal No.") THEN BEGIN
        pErrorCode := '2245';
        pErrorText := STRSUBSTNO(lText005,COHeader.TABLECAPTION,pDocumentId,POSTerminal.TABLECAPTION,COHeader."Terminal No.");
        EXIT(FALSE);
      END;

      COHeader2 := COHeader;
      COHeader.LOCKTABLE;
      COHeader.GET(pDocumentId);
      IF FORMAT(COHeader) <> FORMAT(COHeader2) THEN BEGIN
        pErrorCode := '2244';
        pErrorText := STRSUBSTNO(lText008,COHeader.TABLECAPTION,pDocumentId);
        EXIT(FALSE);
      END;

      COHeader."Terminal No." := '';
      IF pCollectLocInStore <> '' THEN
        COHeader."Collect Location" := pCollectLocInStore;
      IF pReceiptNo <> '' THEN
        COHeader."Receipt No." := pReceiptNo;
      COHeader.MODIFY;

      pCOLineTemp.RESET;
      IF pCOLineTemp.FINDSET THEN
        REPEAT
          IF COLine.GET(pCOLineTemp."Document Id",pCOLineTemp."Line No.") THEN BEGIN
            COLine.Status := pCOLineTemp.Status;
            //LS-8813 -
            IF pCOLineTemp."Inventory Transfer" THEN
              PostInventoryTransfer := TRUE;
            //LS-8813 +
            COLine.MODIFY;
          END;
        UNTIL pCOLineTemp.NEXT = 0;

      COHeader.GET(pDocumentId);
      COHeader.CALCFIELDS("Lines To Pick","Lines To Collect","Lines To Put Back","Lines Collected");
      IF COHeader."Lines To Pick" + COHeader."Lines To Collect" + COHeader."Lines To Put Back" + COHeader."Lines Collected" <> 0 THEN BEGIN
        COHeader.Status := COHeader.Status::Ready;
        IF (COHeader."Collect Time Limit" = 0DT) AND (COHeader."Lines To Collect" <> 0) THEN BEGIN
          AtFirstPick := TRUE;
          COHeader."Collect Time Limit" := CalcTimeLimitToCollect(COHeader."Store No.",ROUNDDATETIME(CURRENTDATETIME,1000));
        END;
        IF COHeader."Lines Collected" <> 0 THEN
          LinesCollected := TRUE;
      END ELSE
        COHeader.Status := COHeader.Status::Finish;
      //LS-8813 -
      IF COHeader."Sourcing Location" <> '' THEN
        IF PostInventoryTransfer THEN BEGIN
          PostTransferShip(pDocumentId,pErrorText);
          IF pErrorText <> '' THEN BEGIN
            pErrorCode := '2246';
            EXIT(FALSE);
          END ELSE BEGIN
            COHeader."Store No." := COHeader."Created at Store";
            COHeader."Inventory Transfer" := FALSE;
          END;
        END ELSE BEGIN
          PostTransferReceive(pDocumentId,pErrorText);
          IF pErrorText <> '' THEN BEGIN
            pErrorCode := '2248';
            EXIT(FALSE);
          END;
        END;
      //LS-8813 +
      COHeader.MODIFY;

      IF AtFirstPick THEN BEGIN
        IF NOT CoRmMgt.MarkRMForPickAsProcessed(COHeader."Document Id",pErrorCode,pErrorText) THEN
          EXIT(FALSE);
        IF NOT CoRmMgt.CreateRMForPutBack(COHeader."Document Id",pErrorCode,pErrorText) THEN
          EXIT(FALSE);
        IF NOT OmniUtility.SendAfterPickMessage(COHeader."Document Id",pErrorCode,pErrorText) THEN
          EXIT(FALSE);
      END;

      IF (COHeader.Status = COHeader.Status::Finish) AND (COHeader."Collect Time Limit" = 0DT) THEN BEGIN  //All Shortage
        IF NOT OmniUtility.SendAfterPickMessage(COHeader."Document Id",pErrorCode,pErrorText) THEN
          EXIT(FALSE);
      END;

      //LS-9161 -
      IF PostInventoryTransfer THEN
        IF CoRmMgt.MarkRMForPickAsProcessed(COHeader."Document Id",pErrorCode,pErrorText) THEN
          CoRmMgt.CreateRMForPick(COHeader."Document Id",pErrorCode,pErrorText);
      //LS-9161 +

      IF LinesCollected THEN
        //LS-7133 -
        IF COHeader."Ship Order" THEN BEGIN
          IF NOT CoRmMgt.MarkRMForPickAsProcessed(COHeader."Document Id",pErrorCode,pErrorText) THEN
            EXIT(FALSE);
        //LS-7133 +
        END ELSE
          IF NOT CoRmMgt.MarkRMForPutBackAsProcessed(COHeader."Document Id",pErrorCode,pErrorText) THEN
            EXIT(FALSE);

      IF COHeader.Status = COHeader.Status::Finish THEN BEGIN
        DeleteReservationEntry(COHeader."Document Id");
        PostCustomerOrder(COHeader."Document Id");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE UpdatePayment@10014518(VAR pCOPaymentTemp@1100409003 : TEMPORARY Record 10016658;VAR pErrorCode@1100409001 : Code[30];VAR pErrorText@1100409000 : Text) : Boolean;
    VAR
      lText008@1100409016 : TextConst 'ENU=Unable to update %1 ''%2''';
      CustomerOrderPayment@10014500 : Record 10016658;
    BEGIN
      //UpdatePayment
      //LS-7133
      pCOPaymentTemp.RESET;
      IF pCOPaymentTemp.FINDSET THEN
        REPEAT
          IF CustomerOrderPayment.GET(pCOPaymentTemp."Document Id",pCOPaymentTemp."Store No.",pCOPaymentTemp."Line No.") THEN
            BEGIN
              CustomerOrderPayment."Finalised Amount" := pCOPaymentTemp."Finalised Amount";
              CustomerOrderPayment.MODIFY;
            END;
        UNTIL pCOPaymentTemp.NEXT = 0
      ELSE BEGIN
        pErrorCode := '2340';
        pErrorText := STRSUBSTNO(lText008,pCOPaymentTemp.TABLECAPTION,pCOPaymentTemp."Document Id");
        EXIT(FALSE)
      END;

      EXIT(TRUE);
    END;

    PROCEDURE FinalizeOrder@1100409015(pReceiptNo@1100409002 : Code[20];pTerminalNo@1100409004 : Code[10];pTransStoreNo@1100409019 : Code[10];pTransTerminalNo@1100409020 : Code[10];pTransactionNo@1100409021 : Integer;VAR pCOLineTemp@1100409003 : TEMPORARY Record 10016652;VAR pErrorCode@1100409001 : Code[30];VAR pErrorText@1100409000 : Text) : Boolean;
    VAR
      COHeader@1100409005 : Record 10016651;
      COHeader2@1100409015 : Record 10016651;
      COLine@1100409014 : Record 10016652;
      CollectedCOLinesTemp@1100409017 : TEMPORARY Record 10016652;
      POSTerminal@1100409012 : Record 99001471;
      lText006@10014500 : TextConst 'ENU=%1 ''%2'' is already reserved by %3 ''%4''';
      lText008@1100409016 : TextConst 'ENU=Unable to update %1 ''%2''';
    BEGIN
      //FinalizeOrder
      COHeader.RESET;
      COHeader.SETCURRENTKEY("Receipt No.");
      COHeader.SETRANGE("Receipt No.",pReceiptNo);
      IF NOT COHeader.FINDFIRST THEN
        EXIT(TRUE);

      IF COHeader.Status = COHeader.Status::Finish THEN
        EXIT(TRUE);

      IF (COHeader.Status = COHeader.Status::Locked) AND (pTerminalNo <> COHeader."Terminal No.") THEN BEGIN
        pErrorCode := '2242';
        pErrorText := STRSUBSTNO(lText006,COHeader.TABLECAPTION,COHeader."Document Id",POSTerminal.TABLECAPTION,COHeader."Terminal No.");
        EXIT(FALSE);
      END;

      COHeader2 := COHeader;
      COHeader.LOCKTABLE;
      COHeader.GET(COHeader2."Document Id");
      IF FORMAT(COHeader) <> FORMAT(COHeader2) THEN BEGIN
        pErrorCode := '2244';
        pErrorText := STRSUBSTNO(lText008,COHeader.TABLECAPTION,COHeader2."Document Id");
        EXIT(FALSE);
      END;
      COHeader."Terminal No." := '';
      COHeader."Trans. Store No." := pTransStoreNo;
      COHeader."Trans. Terminal No." := pTransTerminalNo;
      COHeader."Transaction No." := pTransactionNo;
      COHeader.MODIFY;

      COLine.RESET;
      COLine.SETRANGE("Document Id",COHeader."Document Id");
      COLine.SETRANGE(Status,COLine.Status::Collected);
      IF COLine.FINDSET THEN
        REPEAT
          CollectedCOLinesTemp.INIT;
          CollectedCOLinesTemp := COLine;
          CollectedCOLinesTemp.INSERT;
        UNTIL COLine.NEXT = 0;

      pCOLineTemp.RESET;
      IF pCOLineTemp.FINDSET THEN
        REPEAT
          IF CollectedCOLinesTemp.GET(COHeader."Document Id",pCOLineTemp."Line No.") THEN
            CollectedCOLinesTemp.DELETE;
        UNTIL pCOLineTemp.NEXT = 0;

      CollectedCOLinesTemp.RESET;
      IF CollectedCOLinesTemp.FINDSET THEN
        REPEAT
          IF COLine.GET(CollectedCOLinesTemp."Document Id",CollectedCOLinesTemp."Line No.") THEN BEGIN
            COLine.Status := COLine.Status::Rejected;
            COLine.MODIFY;
          END;
        UNTIL CollectedCOLinesTemp.NEXT = 0;

      COHeader.GET(COHeader2."Document Id");
      COHeader.Status := COHeader.Status::Finish;
      COHeader.MODIFY;

      DeleteReservationEntry(COHeader."Document Id");
      PostCustomerOrder(COHeader."Document Id");

      EXIT(TRUE);
    END;

    PROCEDURE PostCustomerOrder@1100409016(pDocumentId@1100409000 : Code[40]);
    VAR
      COHeader@1100409001 : Record 10016651;
      COLine@1100409002 : Record 10016652;
      CODiscLine@1100409003 : Record 10016653;
      COPayment@10014500 : Record 10016658;
      PostedCOHeader@1100409004 : Record 10016655;
      PostedCOLine@1100409005 : Record 10016656;
      PostedCODiscLine@1100409006 : Record 10016657;
      PostedCOPayment@10014501 : Record 10016659;
    BEGIN
      //PostCOOrder
      COHeader.GET(pDocumentId);
      OnBeforePostCustomerOrder(COHeader);
      PostedCOHeader.INIT;
      PostedCOHeader.TRANSFERFIELDS(COHeader);
      PostedCOHeader.INSERT;

      COLine.RESET;
      COLine.SETRANGE("Document Id",COHeader."Document Id");
      IF COLine.FINDSET THEN
        REPEAT
          PostedCOLine.INIT;
          PostedCOLine.TRANSFERFIELDS(COLine);
          PostedCOLine.INSERT;
        UNTIL COLine.NEXT = 0;

      CODiscLine.RESET;
      CODiscLine.SETRANGE("Document Id",COHeader."Document Id");
      IF CODiscLine.FINDSET THEN
        REPEAT
          PostedCODiscLine.INIT;
          PostedCODiscLine.TRANSFERFIELDS(CODiscLine);
          PostedCODiscLine.INSERT;
        UNTIL CODiscLine.NEXT = 0;

      COPayment.RESET;
      COPayment.SETRANGE("Document Id",COHeader."Document Id");
      IF COPayment.FINDSET THEN
        REPEAT
          PostedCOPayment.INIT;
          PostedCOPayment.TRANSFERFIELDS(COPayment);
          PostedCOPayment.INSERT;
        UNTIL COPayment.NEXT = 0;

      COHeader.GET(pDocumentId);
      COHeader.DELETE;

      COLine.RESET;
      COLine.SETRANGE("Document Id",COHeader."Document Id");
      COLine.DELETEALL;

      CODiscLine.RESET;
      CODiscLine.SETRANGE("Document Id",COHeader."Document Id");
      CODiscLine.DELETEALL;

      COPayment.RESET;
      COPayment.SETRANGE("Document Id",COHeader."Document Id");
      COPayment.DELETEALL;

      OnAfterPostCustomerOrder(PostedCOHeader);
    END;

    PROCEDURE CreateReservationEntry@1100409006(pDocId@1100409004 : Code[40];VAR pCOLineTemp@1100409000 : TEMPORARY Record 10016652;VAR pStore@1100409003 : Record 99001470) : Boolean;
    VAR
      COReservationEntryRec@1100409001 : Record 10016654;
      ItemUOM@1100409002 : Record 5404;
    BEGIN
      //CreateResrvationEntry
      pCOLineTemp.RESET;
      pCOLineTemp.SETRANGE("Line Type",pCOLineTemp."Line Type"::Item);
      IF pCOLineTemp.FINDSET THEN
        REPEAT
          COReservationEntryRec.INIT;
          COReservationEntryRec."Entry No." := 0;
          COReservationEntryRec."Store No." := pStore."No.";
          COReservationEntryRec."Location Code" := pStore."Location Code";
          COReservationEntryRec."Document Id" := pDocId;
          COReservationEntryRec."Line No." := pCOLineTemp."Line No.";
          COReservationEntryRec."Item No." := pCOLineTemp.Number;
          COReservationEntryRec."Variant Code" := pCOLineTemp."Variant Code";
          COReservationEntryRec."Unit of Measure Code" := pCOLineTemp."Unit of Measure Code";
          IF COReservationEntryRec."Unit of Measure Code" <> '' THEN BEGIN
            ItemUOM.SETRANGE("Item No.",pCOLineTemp.Number);
            ItemUOM.SETRANGE(Code,COReservationEntryRec."Unit of Measure Code");
            ItemUOM.FINDFIRST;
            COReservationEntryRec."Qty. per Unit of Measure" := ItemUOM."Qty. per Unit of Measure";
          END ELSE
            COReservationEntryRec."Qty. per Unit of Measure" := 1;
          COReservationEntryRec.VALIDATE(Quantity,pCOLineTemp.Quantity);
          COReservationEntryRec.INSERT;
        UNTIL pCOLineTemp.NEXT = 0;
    END;

    PROCEDURE DeleteReservationEntry@1100409008(pDocId@1100409000 : Code[40]) : Boolean;
    VAR
      COReservationEntryRec@1100409001 : Record 10016654;
    BEGIN
      //DeleteReservationEntry
      COReservationEntryRec.RESET;
      COReservationEntryRec.SETCURRENTKEY("Document Id");
      COReservationEntryRec.SETRANGE("Document Id",pDocId);
      COReservationEntryRec.DELETEALL;
    END;

    PROCEDURE CreatePosTrans@1100409010(pReCalc@1100409027 : Boolean;VAR pCOHeaderTemp@1100409004 : TEMPORARY Record 10016651;VAR pCOLineTemp@1100409003 : TEMPORARY Record 10016652;VAR pCODiscLineTemp@1100409002 : TEMPORARY Record 10016653;VAR pReceiptNo@1100409026 : Code[20];VAR pErrorCode@1100409001 : Code[30];VAR pErrorText@1100409000 : Text;VAR pCOPayTemp@10014500 : TEMPORARY Record 10016658) : Boolean;
    VAR
      lText004@1100409012 : TextConst 'ENU=Item %1 not found.';
      lText005@1100409015 : TextConst 'ENU=VAT Posting Setup %1 %2 not found for Item %3.';
      lText006@1100409017 : TextConst 'ENU=Unit of Measure %1, not specified for Item %2.';
      lText007@1100409021 : TextConst 'ENU=%1 %2 is blocked.';
      lText008@1100409022 : TextConst 'ENU=Invalid %1 %2 for %3 %4.';
      lText010@1100409025 : TextConst 'ENU=%1 %2 for store %3 not found.';
      PosTrans@1100409024 : Record 99008980;
      PosTransLine@1100409023 : Record 99008981;
      PosFuncProfile@1100409020 : Record 99001515;
      Store@1100409019 : Record 99001470;
      Item@1100409018 : Record 27;
      VATPostingSetup@1100409016 : Record 325;
      ItemUOM@1100409014 : Record 5404;
      ItemStatusLink@1100409013 : Record 10001404;
      ItemVariant@1100409011 : Record 5401;
      IncExpAccount@1100409010 : Record 99001476;
      PosSession@1100409009 : Codeunit 99008919;
      PosTransaction@1100409008 : Codeunit 99001570;
      PosFunc@1100409007 : Codeunit 99008900;
      PosPriceUtil@1100409006 : Codeunit 99008906;
      PosOfferExt@1100409029 : Codeunit 99009509;
      ReceiptNo@1100409005 : Code[20];
      OfferType@1100409030 : 'Periodic Disc.,Customer,InfoCode,Total,Line,Promotion,Deal,Total Discount,Tender Type,Item Point,Line Discount';
    BEGIN
      //CreatePosTrans
      Store.GET(PosSession.StoreNo);
      PosFuncProfile.GET(PosSession.FunctionalityProfileID);
      ReceiptNo := PosTransaction.GetReceiptNo;
      PosTransaction.StartNewTransaction;
      PosFunc.PosTransDiscLoad(ReceiptNo);
      PosTrans.GET(ReceiptNo);
      PosTrans."New Transaction" := FALSE;
      PosTrans."Transaction Type" := PosTrans."Transaction Type"::Sales;
      IF PosTrans."Member Card No." <> pCOHeaderTemp."Member Card No." THEN
        PosTrans."Member Card No." := pCOHeaderTemp."Member Card No.";
      IF PosTrans."Member Card No." <> '' THEN BEGIN
        COMMIT;
        //LS-8547//
      //  IF NOT PosFunc.LoadMemberInformation(PosTrans."Member Card No.",ProcessError,pErrorText) THEN BEGIN
      //    pErrorCode := '1618';
        //LS-8547//
        IF NOT PosFunc.GetMemberInfoForPos(PosTrans."Member Card No.",pErrorCode,pErrorText) THEN
          EXIT(FALSE);
      //LS-8547  END;
      END;

      PosTrans."Source Type" := pCOHeaderTemp."Source Type";
      PosTrans."Customer Order" := TRUE;
      PosTrans."Ship Customer Order" := pCOHeaderTemp."Ship Order";  //LS-7133

      pCOLineTemp.SETRANGE("Line Type",pCOLineTemp."Line Type"::Item);
      IF pCOLineTemp.FINDSET THEN
        REPEAT
          PosTransLine.INIT;
          PosTransLine."Receipt No." := PosTrans."Receipt No.";
          PosTransLine."Line No." := pCOLineTemp."Line No.";
          PosTransLine.Marked := FALSE;
          PosTransLine."Store No." := PosTrans."Store No.";
          PosTransLine."POS Terminal No." := PosTrans."POS Terminal No.";
          //PosTransLine."Entry Type" := PosTransLine."Entry Type"::Item;
          CASE pCOLineTemp."Line Type" OF
            pCOLineTemp."Line Type"::Item,pCOLineTemp."Line Type"::Shipping :
              PosTransLine."Entry Type" := PosTransLine."Entry Type"::Item;
            pCOLineTemp."Line Type"::IncomeExpense :
              PosTransLine."Entry Type" := PosTransLine."Entry Type"::IncomeExpense;
          END;

          PosTransLine."Entry Status" := PosTransLine."Entry Status"::" ";

          IF pCOLineTemp.Number <> '' THEN BEGIN
            PosTransLine.Number := pCOLineTemp.Number;
            IF NOT PosFunc.LoadItem(PosTransLine) THEN BEGIN
              pErrorCode := '1603';
              pErrorText := STRSUBSTNO(lText004,PosTransLine.Number);
              EXIT(FALSE);
            END;

            Item.GET(PosTransLine.Number);
            IF NOT VATPostingSetup.GET(PosTrans."VAT Bus.Posting Group",Item."VAT Prod. Posting Group") THEN
              IF (Item."VAT Bus. Posting Gr. (Price)" = '') OR
                 (NOT VATPostingSetup.GET(Item."VAT Bus. Posting Gr. (Price)",Item."VAT Prod. Posting Group"))
              THEN BEGIN
                pErrorCode := '1604';
                pErrorText := STRSUBSTNO(lText005,PosTrans."VAT Bus.Posting Group",Item."VAT Prod. Posting Group",pCOLineTemp.Number);
                EXIT(FALSE);
              END;

            IF pCOLineTemp."Unit of Measure Code" = '' THEN
              pCOLineTemp."Unit of Measure Code" := Item."Sales Unit of Measure";

            IF (pCOLineTemp."Unit of Measure Code" <> '') AND (NOT ItemUOM.GET(PosTransLine.Number,pCOLineTemp."Unit of Measure Code")) THEN BEGIN
              pErrorCode := '1605';
              pErrorText := STRSUBSTNO(lText006,pCOLineTemp."Unit of Measure Code",PosTransLine.Number);
              EXIT(FALSE);
            END;

            IF BOUtils.IsBlockSaleOnPOS(Item."No.",'',pCOLineTemp."Variant Code",Store."No.",Store."Location Code",TODAY,ItemStatusLink)
            THEN BEGIN
              pErrorCode := '1606';
              pErrorText := STRSUBSTNO(lText007,Item.FIELDCAPTION("No."),Item."No.");
              EXIT(FALSE);
            END;

            IF pCOLineTemp."Variant Code" <> '' THEN BEGIN
              IF NOT ItemVariant.GET(Item."No.",pCOLineTemp."Variant Code") THEN BEGIN
                pErrorCode := '1607';
                pErrorText := STRSUBSTNO(lText008,ItemVariant.TABLECAPTION,pCOLineTemp."Variant Code",Item.FIELDCAPTION("No."),Item."No.");
                EXIT(FALSE);
              END;
              PosTransLine."Variant Code" := pCOLineTemp."Variant Code";
            END;

            PosTransLine.VALIDATE(Number,PosTransLine.Number);
            IF (NOT PosTransLine."Price in Barcode") AND (NOT PosTransLine."Quantity in Barcode") THEN BEGIN
              PosTransLine.Quantity := pCOLineTemp.Quantity;
              IF PosTransLine.Quantity = 0 THEN
                PosTransLine.Quantity := 1;
            END;

            IF PosTransLine."Unit of Measure" <> pCOLineTemp."Unit of Measure Code" THEN
              PosTransLine."Unit of Measure" := pCOLineTemp."Unit of Measure Code";
            PosPriceUtil.CalcPrice(PosTransLine,TRUE);
            IF pCOLineTemp.Price <> PosTransLine.Price THEN
              PosTransLine.VALIDATE(Price,pCOLineTemp.Price);

            PosTransLine.INSERT;

            LoadTransDisc(pCOLineTemp,pCODiscLineTemp,PosTrans,PosTransLine);

            PosTransLine.CalcPrices;
            PosTransLine.MODIFY;
            OnAfterInsertItemPosTransLine(PosTransLine);
          END;
        UNTIL pCOLineTemp.NEXT = 0;

      pCOLineTemp.SETRANGE("Line Type",pCOLineTemp."Line Type"::IncomeExpense);
      IF pCOLineTemp.FINDSET THEN
        REPEAT
          IF NOT IncExpAccount.GET(PosTrans."Store No.",pCOLineTemp.Number) THEN BEGIN
            pErrorCode := '1612';
            pErrorText := STRSUBSTNO(lText010,IncExpAccount.TABLECAPTION,pCOLineTemp.Number,PosTrans."Store No.");
            PosTrans.DELETE(TRUE);
            EXIT;
          END;

          PosTransLine.INIT;
          PosTransLine."Receipt No." := PosTrans."Receipt No.";
          PosTransLine."Line No." := pCOLineTemp."Line No.";
          PosTransLine."Store No." := PosTrans."Store No.";
          PosTransLine."POS Terminal No." := PosTrans."POS Terminal No.";
          PosTransLine."Entry Type" := PosTransLine."Entry Type"::IncomeExpense;
          PosTransLine."Entry Status" := PosTransLine."Entry Status"::" ";
          PosTransLine.VALIDATE(Number,IncExpAccount."No.");
          PosTransLine.VALIDATE(Amount,pCOLineTemp.Amount);
          PosTransLine.INSERT;
          OnAfterInsertPosIncomeExpenceTransLine(PosTransLine);
        UNTIL pCOLineTemp.NEXT = 0;

      //LS-9094-
          //LS-9349-
      PosTransLine.INIT;
      PosTransLine."Receipt No." := PosTrans."Receipt No.";
      PosTransLine."Line No." := PosTransLine."Line No." + 10000;
      PosTransLine."Store No." := PosTrans."Store No.";
      PosTransLine."POS Terminal No." := PosTrans."POS Terminal No.";
      PosTransLine."Entry Type" := PosTransLine."Entry Type"::IncomeExpense;
      PosTransLine."Entry Status" := PosTransLine."Entry Status"::" ";
      PosTransLine.VALIDATE(Number,Store."Customer Order Inc/Expense Acc");
      PosTransLine.VALIDATE(Amount,-pCOPayTemp."Finalised Amount");
      PosTransLine.INSERT;
      OnAfterInsertPosIncomeExpenceTransLine(PosTransLine);
          //LS-9349+
      //LS-9094+
      IF pReCalc THEN BEGIN
        PosPriceUtil.CalcPeriodicOnTotalPressed(PosTrans);
        PosFunc.RecalcSlip(PosTrans);
        PosOfferExt.ReCalcLinePreTotal(PosTrans);
        PosOfferExt.ReCalcOfferSeq(PosTrans,OfferType::"Total Discount");
      END;

      PosTrans.MODIFY;

      IF NOT pReCalc THEN
        PosPriceUtil.SetTransUnchangableDiscounts(PosTrans);

      PosFunc.PosTransDiscFlush;

      pReceiptNo := ReceiptNo;

      OnAfterCreatePosTrans(PosTrans);

      EXIT(TRUE);
    END;

    PROCEDURE CreatePosPayment@10014501(VAR pCOHeaderTemp@10014505 : TEMPORARY Record 10016651;VAR pCOPaymentTemp@10014512 : TEMPORARY Record 10016658;VAR pReceiptNo@10014502 : Code[20];VAR pErrorCode@10014501 : Code[30];VAR pErrorText@10014500 : Text) : Boolean;
    VAR
      POSTransLine@10014504 : Record 99008981;
      TenderType@10014506 : Record 99001462;
      TenderCardType@10014509 : Record 99001464;
      POSCardEntry@10014508 : Record 99008987;
      PosFunc@10014507 : Codeunit 99008900;
      POSSession@10014510 : Codeunit 99008919;
      NoPayment@10014511 : TextConst 'ENU=Payment not found';
    BEGIN
      //LS-7133
      pCOPaymentTemp.RESET;
      IF pCOPaymentTemp.FINDSET THEN
        REPEAT
          POSTransLine."Receipt No." := pReceiptNo;
          POSTransLine."Line No." := GetPosTransLineNumber(pReceiptNo);
          POSTransLine."Store No." := pCOHeaderTemp."Store No.";
          POSTransLine."POS Terminal No." := pCOHeaderTemp."Terminal No.";
          TenderType.GET(pCOHeaderTemp."Store No.",pCOPaymentTemp."Tender Type");
          POSTransLine."Entry Type" := POSTransLine."Entry Type"::Payment;
          POSTransLine.Quantity := 1;
          POSTransLine.VALIDATE(Number,TenderType.Code);
          IF TenderType."Multiply in Tender Operations" THEN BEGIN
            POSTransLine.VALIDATE(Price,pCOPaymentTemp."Finalised Amount" * pCOPaymentTemp."Currency Factor");
            POSTransLine.VALIDATE(Quantity);
          END ELSE
            POSTransLine.VALIDATE(Amount,pCOPaymentTemp."Finalised Amount");

          IF TenderType."Foreign Currency" AND (pCOPaymentTemp."Currency Code" <> '') THEN BEGIN
            POSTransLine."Currency Code" := pCOPaymentTemp."Currency Code";
            POSTransLine."Amount In Currency" := pCOPaymentTemp."Finalised Amount";
            POSTransLine.Description := pCOPaymentTemp."Currency Code" + ' '
              + PosFunc.FormatCurrency(POSTransLine."Amount In Currency",pCOPaymentTemp."Currency Code");
          END;

          POSTransLine."Card/Customer/Coup.Item No" := '';

          CreatePosCardEntry(pCOHeaderTemp,pCOPaymentTemp,POSCardEntry,pReceiptNo,pErrorCode,pErrorText);

          IF TenderType."Card/Account No." THEN BEGIN
            IF (TenderType."Function" = TenderType."Function"::Card) AND (POSCardEntry."Entry No." <> 0) THEN BEGIN
              IF TenderCardType.GET(POSTransLine."Store No.",POSTransLine.Number,POSTransLine."Card Type") THEN
                POSTransLine.Description := TenderCardType.Description;
            END;
          END;

          POSTransLine."Created by Staff ID" := POSSession.StaffID;
          POSTransLine.INSERT;

        UNTIL pCOPaymentTemp.NEXT = 0
      ELSE
        BEGIN
          pErrorText := NoPayment;
          EXIT(FALSE);
        END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreatePosCardEntry@10014522(VAR pCustomerOrderHeader@10014506 : TEMPORARY Record 10016651;VAR pCustomerOrderPayment@10014503 : TEMPORARY Record 10016658;VAR pPOSCardEntry@10014505 : Record 99008987;VAR pReceiptNo@10014502 : Code[20];VAR pErrorCode@10014501 : Code[30];VAR pErrorText@10014500 : Text);
    VAR
      POSCardEntry@10014504 : Record 99008987;
      COeCommerceMgt@10014507 : Codeunit 10016657;
    BEGIN
      //LS-7133
      POSCardEntry.INIT;
      POSCardEntry."Store No." := pCustomerOrderPayment."Store No.";
      POSCardEntry."POS Terminal No." := pCustomerOrderHeader."Terminal No.";
      POSCardEntry."Receipt No." := pReceiptNo;
      POSCardEntry."Transaction No." := pCustomerOrderHeader."Transaction No.";
      COeCommerceMgt.GetPosCardEntryNumber(POSCardEntry);
      POSCardEntry."Tender Type" := pCustomerOrderPayment."Tender Type";
      POSCardEntry."Line No." := pCustomerOrderPayment."Line No.";
      POSCardEntry."Transaction Type" := POSCardEntry."Transaction Type"::Sale;
      POSCardEntry.Date := TODAY;
      POSCardEntry.Time := TIME;
      POSCardEntry."Authorisation Ok" := TRUE;
      POSCardEntry."Card Number" := '';
      POSCardEntry.INSERT;
    END;

    PROCEDURE LoadTransDisc@1100409011(VAR pCOLineTemp@1100409001 : TEMPORARY Record 10016652;VAR pCODiscLineTemp@1100409000 : TEMPORARY Record 10016653;VAR pPosTrans@1100409006 : Record 99008980;VAR pPosTransLine@1100409003 : Record 99008981) : Boolean;
    VAR
      PeriodicDiscount_l@1100409002 : Record 99001453;
      Offer_l@1100409008 : Record 99001502;
      PosDiscLine@1100409005 : Record 99008943;
      PosPriceUtil@1100409004 : Codeunit 99008906;
      PosOfferExt@1100409007 : Codeunit 99009509;
      PosFunc@1100409009 : Codeunit 99008900;
    BEGIN
      //LoadTransDisc
      PosOfferExt.InitFunc(pPosTrans);

      pCODiscLineTemp.SETRANGE("Document Id",pCOLineTemp."Document Id");
      pCODiscLineTemp.SETRANGE("Line No.",pCOLineTemp."Line No.");
      IF pCODiscLineTemp.FINDSET THEN
        REPEAT
          //Periodic Disc.,Customer,InfoCode,Total,Line,Promotion,Deal,Total Discount,Tender Type,Item Point,Line Discount,Member Point,Coupon
          //     0           1          2      3    4       5      6     7                 8          9          10            11         12
          IF pCODiscLineTemp."Discount Type" IN[0,1,2,3,4,9] THEN BEGIN
            PosPriceUtil.InsertTransDiscPercent(pPosTransLine,pCODiscLineTemp."Discount Percent",pCODiscLineTemp."Discount Type",pCODiscLineTemp."Periodic Disc. Group");
            PosPriceUtil.InsertTransDiscAmount(pPosTransLine,pCODiscLineTemp."Discount Amount",pCODiscLineTemp."Discount Type",pCODiscLineTemp."Periodic Disc. Group");
          END ELSE
            IF pCODiscLineTemp."Discount Type" IN[5,6] THEN BEGIN
              Offer_l.GET(pCODiscLineTemp."Offer No.");
              PosDiscLine.INIT;
              PosDiscLine."Receipt No." := pPosTrans."Receipt No.";
              PosDiscLine."Line No." := pCOLineTemp."Line No.";
              PosDiscLine.DiscType := pCODiscLineTemp."Discount Type";
              PosDiscLine."POS Terminal No." := pPosTrans."POS Terminal No.";
              PosDiscLine."Offer No." := Offer_l."No.";
              PosDiscLine."Block Manual Price Change" := Offer_l."Block Manual Price Change";
              PosDiscLine."Block Line Discount Offer" := Offer_l."Block Line Discount Offer";
              PosDiscLine."Block Total Discount Offer" := Offer_l."Block Total Discount Offer";
              PosDiscLine."Block Tender Type Discount" := Offer_l."Block Tender Type Discount";
              PosDiscLine."Block Loyalty Points" := Offer_l."Block Member Points";
              PosDiscLine."Block Infocode Discount" := Offer_l."Block InfoCode Discount";
              PosDiscLine."Member Attribute" := Offer_l."Member Attribute";
              PosDiscLine."Member Attribute Value" := Offer_l."Member Attribute Value";
              PosDiscLine."Tracking No." := Offer_l."Discount Tracking No.";
              PosFunc.PosTransDiscUpdateRec(PosDiscLine);
            END ELSE BEGIN
              PeriodicDiscount_l.GET(pCODiscLineTemp."Offer No.");
              PosDiscLine.INIT;
              PosDiscLine."Receipt No." := pPosTrans."Receipt No.";
              PosDiscLine."Line No." := pCOLineTemp."Line No.";
              PosDiscLine."No." := pCODiscLineTemp."Entry No.";
              PosDiscLine.DiscType := pCODiscLineTemp."Discount Type";
              PosDiscLine."Periodic Disc. Group" := pCODiscLineTemp."Periodic Disc. Group";
              PosDiscLine."Offer No." := pCODiscLineTemp."Offer No.";
              PosDiscLine."Discount %" := pCODiscLineTemp."Discount Percent";
              PosDiscLine."Discount Amount" := pCODiscLineTemp."Discount Amount";
              // PosDiscLine."Benefit Step Amount" := pBenefitStepAmount;
              IF PosDiscLine.DiscType = PosDiscLine.DiscType::"Line Discount" THEN BEGIN
                PosDiscLine."Sequence Code" := PeriodicDiscount_l."Sequence Code";
                PosDiscLine."Sequence Function" := PeriodicDiscount_l."Sequence Function";
              END ELSE BEGIN
                PosDiscLine."Sequence Code" := PosOfferExt.GetOfferTypeSeq(pCODiscLineTemp."Discount Type");
                PosDiscLine."Sequence Function" := PosOfferExt.GetOfferTypeSeqFunc(pCODiscLineTemp."Discount Type");
              END;
              PosDiscLine."Tracking No." := PeriodicDiscount_l."Discount Tracking No.";
              //PosDiscLine."Tracking Instance ID" := PosFunc.GetCurrTrackingInstanceID;
              PosDiscLine."Manual Selection" := PeriodicDiscount_l."Block Manual Price Change";
              PosDiscLine."Line Discount Group" := PeriodicDiscount_l."Line Discount Group Code";
              PosDiscLine."Member Attribute" := PeriodicDiscount_l."Member Attribute";
              PosDiscLine."Member Attribute Value" := PeriodicDiscount_l."Member Attribute Value";
              PosDiscLine."Block Manual Price Change" := PeriodicDiscount_l."Block Manual Price Change";
              PosDiscLine."Block Line Discount Offer" := PeriodicDiscount_l."Block Line Discount Offer";
              PosDiscLine."Block Total Discount Offer" := PeriodicDiscount_l."Block Total Discount Offer";
              PosDiscLine."Block Tender Type Discount" := PeriodicDiscount_l."Block Tender Type Discount";
              PosDiscLine."Block Loyalty Points" := PeriodicDiscount_l."Block Member Points";
              PosFunc.PosTransDiscUpdateRec(PosDiscLine);
            END;
        UNTIL pCODiscLineTemp.NEXT = 0;
    END;

    PROCEDURE AssignUpdateBuffer@1100409012(pDocStatus@1100409002 : Integer;VAR pCOLine_In_Tmp@1100409000 : TEMPORARY Record 10016652;VAR pCOLine_Out_Tmp@1100409001 : TEMPORARY Record 10016652);
    BEGIN
      //AssignUpdateBuffer
      IF pCOLine_In_Tmp.FINDSET THEN
        REPEAT
          pCOLine_Out_Tmp.INIT;
          pCOLine_Out_Tmp := pCOLine_In_Tmp;
          pCOLine_Out_Tmp.Status := pDocStatus;
          pCOLine_Out_Tmp.INSERT;
          pCOLine_In_Tmp.DELETE;
        UNTIL pCOLine_In_Tmp.NEXT = 0;
    END;

    PROCEDURE CreateQRCode@1100409013(pDocStatus@1100409001 : 'To Pick,To Collect,To Put Back';pDocumentId@1100409000 : Code[40];VAR pQRCodeRec@1100409002 : Record 99008535);
    VAR
      QRCodeText@1100409003 : Text;
      ThreeTierMgt@1100409004 : Codeunit 419;
      QRCodeFileName@1100409005 : Text;
    BEGIN
      //CreateQRCode
      QRCodeText := '<CustomerOrder><DocStatus>' + FORMAT(pDocStatus) + '</DocStatus><DocID>' + pDocumentId + '</DocID></CustomerOrder>';
      QRCodeFileName := BOUtils.GetQRCode(QRCodeText);
      QRCodeFileName := BOUtils.MoveQRFileToPath(QRCodeFileName);
      CLEAR(pQRCodeRec);
      ThreeTierMgt.BLOBImport(pQRCodeRec,QRCodeFileName);
    END;

    PROCEDURE VariantMatch@1100409014(VAR pCOLineTemp@1100409002 : TEMPORARY Record 10016652;VAR pItem@1100409001 : Record 27;VAR pBarcodes@1100409000 : Record 99001451) : Boolean;
    BEGIN
      //VariantMatch
      IF pCOLineTemp."Variant Code" = '' THEN
        IF pItem."No." = pBarcodes."Barcode No." THEN
          IF pCOLineTemp."Variant Code" = pBarcodes."Variant Code" THEN
            EXIT(TRUE)
          ELSE
            EXIT(FALSE)
        ELSE
          EXIT(TRUE)
      ELSE
        //LS-9289 IF pItem."No." = pBarcodes."Barcode No." THEN
        IF pItem."No." = pBarcodes."Item No." THEN  //LS-9289
          IF pCOLineTemp."Variant Code" = pBarcodes."Variant Code" THEN
            EXIT(TRUE)
          ELSE
            EXIT(FALSE)
        ELSE
          EXIT(FALSE);
    END;

    PROCEDURE UoMMatch@1100409031(VAR pCOLineTemp@1100409000 : TEMPORARY Record 10016652;VAR pItem@1100409001 : Record 27;VAR pBarcodes@1100409002 : Record 99001451) : Boolean;
    BEGIN
      //UoMMatch
      IF pCOLineTemp."Unit of Measure Code" = '' THEN
        IF pItem."No." = pBarcodes."Item No." THEN
          IF (pBarcodes."Unit of Measure Code" = '') OR (pBarcodes."Unit of Measure Code" = pItem."Sales Unit of Measure") THEN
            EXIT(TRUE)
          ELSE
            EXIT(FALSE)
        ELSE
          EXIT(TRUE)
      ELSE
        IF pItem."No." = pBarcodes."Item No." THEN
          IF pCOLineTemp."Unit of Measure Code" = pBarcodes."Unit of Measure Code" THEN
            EXIT(TRUE)
          ELSE
            EXIT(FALSE)
        ELSE
          IF pCOLineTemp."Unit of Measure Code" = pItem."Sales Unit of Measure" THEN
            EXIT(TRUE)
          ELSE
            EXIT(FALSE);
    END;

    PROCEDURE CustomerOrderFulfillment@1100409017(VAR pCOHeaderTemp@1100409004 : TEMPORARY Record 10016651;VAR pCOLineTemp@1100409003 : TEMPORARY Record 10016652;VAR pErrorCode@1100409001 : Code[30];VAR pErrorText@1100409000 : Text) : Boolean;
    VAR
      Store@1100409013 : Record 99001470;
      MembershipCard@1100409014 : Record 99009003;
      Item@1100409012 : Record 27;
      ItemVariant@1100409011 : Record 5401;
      ItemUOM@1100409010 : Record 5404;
      MemberCardMgt@1100409009 : Codeunit 99009001;
      lText001@1100409025 : TextConst 'ENU=%1 ''%2'' not found.';
      lText004@1100409022 : TextConst 'ENU=%1,%2';
      COReservationEntries@1100409026 : Record 10016654;
      ItemQty@1100409027 : Decimal;
      QtySoldNotPosted@1100409030 : Decimal;
    BEGIN
      //CustomerOrderFulfillment
      IF NOT Store.GET(pCOHeaderTemp."Store No.") THEN BEGIN
        pErrorCode := '2202';
        pErrorText := STRSUBSTNO(lText001,Store.TABLECAPTION,pCOHeaderTemp."Store No.");
        EXIT(FALSE);
      END;

      IF NOT pCOHeaderTemp."Anonymous Order" THEN
        IF NOT MemberCardMgt.GetMembershipCard(pCOHeaderTemp."Member Card No.",MembershipCard,pErrorText) THEN BEGIN
          pErrorCode := '2203';
          IF pErrorText = '' THEN
            pErrorText := STRSUBSTNO(lText001,MembershipCard.TABLECAPTION,pCOHeaderTemp."Member Card No.");
          EXIT(FALSE);
        END;

      IF pCOLineTemp.FINDSET THEN
        REPEAT
          IF pCOLineTemp."Line Type" = pCOLineTemp."Line Type"::Item THEN BEGIN
            IF NOT Item.GET(pCOLineTemp.Number) THEN BEGIN
              pErrorCode := '2220';
              pErrorText := STRSUBSTNO(lText001,Item.TABLECAPTION,pCOLineTemp.Number);
              EXIT(FALSE);
            END;
            IF pCOLineTemp."Variant Code" <> '' THEN
              IF NOT ItemVariant.GET(Item."No.",pCOLineTemp."Variant Code") THEN BEGIN
                pErrorCode := '2221';
                pErrorText := STRSUBSTNO(lText001,ItemVariant.TABLECAPTION,STRSUBSTNO(lText004,Item."No.",pCOLineTemp."Variant Code"));
                EXIT(FALSE);
              END;
            IF pCOLineTemp."Unit of Measure Code" <> '' THEN
              IF NOT ItemUOM.GET(Item."No.",pCOLineTemp."Unit of Measure Code") THEN BEGIN
                pErrorCode := '2222';
                pErrorText := STRSUBSTNO(lText001,ItemUOM.TABLECAPTION,STRSUBSTNO(lText004,Item."No.",pCOLineTemp."Unit of Measure Code"));
                EXIT(FALSE);
              END;
            Item.SETRANGE("Store Filter",pCOHeaderTemp."Store No.");
            Item.VALIDATE("Store Filter");
            IF pCOLineTemp."Variant Code" <> '' THEN
              Item.SETRANGE("Variant Filter",pCOLineTemp."Variant Code")
            ELSE
              Item.SETRANGE("Variant Filter");
            Item.CALCFIELDS(Inventory);
            QtySoldNotPosted := BOUtils.ReturnQtySoldNotPosted(Item."No.",
               Item.GETFILTER("Store Filter"),
               Item.GETFILTER("Location Filter"),
               Item.GETFILTER("Variant Filter"),
               Item.GETFILTER("Date Filter"));
            ItemQty := Item.Inventory - QtySoldNotPosted;

            COReservationEntries.SETRANGE("Item No.",pCOLineTemp.Number);
            Item.COPYFILTER("Location Filter",COReservationEntries."Location Code");
            Item.COPYFILTER("Variant Filter",COReservationEntries."Variant Code");
            COReservationEntries.CALCSUMS("Quantity (Base)");
            ItemQty := ItemQty - COReservationEntries."Quantity (Base)";
            IF pCOLineTemp."Unit of Measure Code" <> '' THEN
              ItemQty := ROUND(ItemQty / ItemUOM."Qty. per Unit of Measure",0.00001);
            pCOLineTemp."Internal Available Qty." := ItemQty;
            pCOLineTemp.MODIFY;
          END;
        UNTIL pCOLineTemp.NEXT = 0;
      EXIT(TRUE);
    END;

    PROCEDURE CalcTimeLimitToCollect@1100409021(pStoreNo@1100409000 : Code[10];pPickTime@1100409001 : DateTime) : DateTime;
    VAR
      COSetup@1100409002 : Record 10016650;
      RetailCalendarMgt@1100409005 : Codeunit 99009017;
      CollectTime@1100409003 : DateTime;
      OpenFromTime@1100409006 : Time;
      OpenToTime@1100409007 : Time;
      OpenAfterMidnight@1100409008 : Boolean;
      HoursToCollectDuration@1000 : Duration;
      HoursToCollectBig@1001 : BigInteger;
    BEGIN
      //CalcTimeLimitToCollect
      COSetup.GET;

      IF COSetup."Hours to Collect" <> 0 THEN BEGIN
        HoursToCollectBig := ROUND(COSetup."Hours to Collect",1);
        HoursToCollectBig := HoursToCollectBig * (1000 * 60 * 60);
        HoursToCollectDuration := ROUND(HoursToCollectBig,1);
        CollectTime := pPickTime + HoursToCollectDuration;
      END ELSE
        CollectTime := pPickTime;

      IF COSetup."Hours Adjustment" = COSetup."Hours Adjustment"::"End of Business" THEN BEGIN
        IF RetailCalendarMgt.GetStoreOpenFromTo(pStoreNo,1,DT2DATE(CollectTime),OpenFromTime,OpenToTime,OpenAfterMidnight) THEN
          IF OpenAfterMidnight THEN
            CollectTime := CREATEDATETIME(DT2DATE(CollectTime),235959T)
          ELSE
            CollectTime := CREATEDATETIME(DT2DATE(CollectTime),OpenToTime);
      END ELSE
        IF COSetup."Hours Adjustment" = COSetup."Hours Adjustment"::"Fixed Time" THEN
          CollectTime := CREATEDATETIME(DT2DATE(CollectTime),COSetup."Fixed Time of Day");

      EXIT(CollectTime);
    END;

    PROCEDURE CalcTotalsBasedOnAvailability@1100409022(pDocId@1100409000 : Code[40];VAR pDiscAmount@1100409005 : Decimal;VAR pNetAmount@1100409001 : Decimal;VAR pVatAmount@1100409002 : Decimal;VAR pAmount@1100409006 : Decimal);
    VAR
      COHeader@1100409003 : Record 10016651;
      COLine@1100409004 : Record 10016652;
    BEGIN
      //CalcTotalsBasedOnAvailability
      COHeader.GET(pDocId);

      pDiscAmount := 0;
      pNetAmount := 0;
      pVatAmount := 0;
      pAmount := 0;

      COLine.RESET;
      COLine.SETRANGE("Document Id",COHeader."Document Id");
      COLine.SETRANGE(Status,COLine.Status::"To Collect");
      IF COLine.FINDSET THEN
        REPEAT
          pDiscAmount := pDiscAmount + COLine."Discount Amount";
          pNetAmount := pNetAmount + COLine."Net Amount";
          pVatAmount := pVatAmount + COLine."Vat Amount";
          pAmount := pAmount + COLine.Amount;
        UNTIL COLine.NEXT = 0;
    END;

    PROCEDURE "C&CShipping"@10014571(VAR CustomerOrderHeaderTEMP_p@10014500 : TEMPORARY Record 10016651) : Code[10];
    VAR
      CustomerOrderLineTemp@10014533 : TEMPORARY Record 10016652;
      SalesHeader@10014535 : Record 36;
      SalesPostPrint@10014531 : Codeunit 82;
    BEGIN
      //LS-7133
      IF SalesHeader.GET(SalesHeader."Document Type"::Order,CustomerOrderHeaderTEMP_p."Sales Order No.") THEN BEGIN
        UpdateSalesLines(CustomerOrderHeaderTEMP_p);
        CustomerOrderLineTemp.RESET;
        CustomerOrderLineTemp.SETRANGE("Document Id",CustomerOrderHeaderTEMP_p."Document Id");
        CustomerOrderLineTemp.SETRANGE(Status,CustomerOrderLineTemp.Status::"To Collect");
        CustomerOrderLineTemp.MODIFYALL(Status,CustomerOrderLineTemp.Status::Collected);
        CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
        SalesPostPrint.GetReport(SalesHeader);
      END;
    END;

    LOCAL PROCEDURE ShouldCreateSalesOrder@10012502(CustomerOrderHeader_p@10014500 : Record 10016651) : Boolean;
    VAR
      CustomerOrderSetup@10014501 : Record 10016650;
    BEGIN
      //LS-7133
      CustomerOrderSetup.GET;
      IF CustomerOrderHeader_p."Click And Collect Order" THEN
        EXIT(FALSE);

      IF CustomerOrderHeader_p."Sales Order No." <> '' THEN
        EXIT(FALSE);

      IF CustomerOrderSetup."Use Scheduler to Create SO" THEN
        EXIT(FALSE);

      IF CustomerOrderHeader_p."Inventory Transfer" THEN  //LS-8813
        EXIT(FALSE);  //LS-8813

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLines@10011503(VAR CustomerOrderHeaderTEMP_p@10014504 : TEMPORARY Record 10016651);
    VAR
      SalesLine@10014500 : Record 37;
      NewSalesLine@10014503 : Record 37;
      CustomerOrderLine@10014501 : Record 10016652;
    BEGIN
      //LS-7133
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",CustomerOrderHeaderTEMP_p."Sales Order No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      IF SalesLine.FINDSET THEN
        REPEAT
          NewSalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
          CustomerOrderLine.RESET;
          CustomerOrderLine.SETRANGE("Document Id",CustomerOrderHeaderTEMP_p."Document Id");
          CustomerOrderLine.SETRANGE(Number,SalesLine."No.");
          CustomerOrderLine.SETRANGE("Original Line No.",SalesLine."Line No.");
          CustomerOrderLine.SETRANGE(Status,CustomerOrderLine.Status::"To Collect");
          IF CustomerOrderLine.FINDFIRST THEN BEGIN
            CustomerOrderLine.CALCSUMS(Quantity);
            NewSalesLine.VALIDATE(Quantity,CustomerOrderLine.Quantity);
            NewSalesLine.VALIDATE("Unit Price",SalesLine."Unit Price");
            NewSalesLine.VALIDATE("Line Discount Amount",SalesLine."Line Discount Amount");
            NewSalesLine.MODIFY;
          END ELSE
            NewSalesLine.DELETE;
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE CustomerOrderInventoryAvailability@10011501(VAR pCOHeaderTemp@10014503 : TEMPORARY Record 10016651;VAR pCOLineTemp@10014502 : TEMPORARY Record 10016652;VAR pCOSourcingBuffer@10014510 : TEMPORARY Record 10016665;QueryLocalLocation@10014513 : Boolean;SourceAllItems@10014514 : Boolean;VAR pErrorCode@10014501 : Code[30];VAR pErrorText@10014500 : Text) : Code[10];
    VAR
      COSourcingLocations@10014506 : Record 10016664;
      Store@10014507 : Record 99001470;
      PreferedLocation@10014509 : Code[10];
      Deliverytime@10014504 : Integer;
      FastestDelivery@10014505 : Integer;
    BEGIN
      IF QueryLocalLocation THEN BEGIN  //LS-8553
        PreferedLocation := '';
        QueryInventory(pCOLineTemp,pCOHeaderTemp,pCOSourcingBuffer,0);
        IF pCOSourcingBuffer.COUNT = pCOLineTemp.COUNT THEN
          IF Store.GET(pCOHeaderTemp."Store No.") THEN
            EXIT(Store."Location Code");
      END;  //LS-8553

      QueryInventory(pCOLineTemp,pCOHeaderTemp,pCOSourcingBuffer,1);
      COSourcingLocations.RESET;
      COSourcingLocations.SETCURRENTKEY("Delivery Store",Priority);
      COSourcingLocations.SETRANGE("Delivery Store",pCOHeaderTemp."Store No.");
      IF COSourcingLocations.FINDSET THEN REPEAT
        pCOSourcingBuffer.SETRANGE(Location,COSourcingLocations."Sourcing Location");
        IF pCOSourcingBuffer.COUNT = pCOLineTemp.COUNT THEN BEGIN                            //Are all items on inventory
          IF pCOHeaderTemp."Sourcing Order" = pCOHeaderTemp."Sourcing Order"::"Delivery Time" THEN
            BEGIN
              Deliverytime := CALCDATE(COSourcingLocations."Lead Time Calculation",WORKDATE) - WORKDATE;
              IF ((Deliverytime < FastestDelivery) AND (Deliverytime > 0)) OR (FastestDelivery = 0) THEN BEGIN
                PreferedLocation := COSourcingLocations."Sourcing Location";
                FastestDelivery := Deliverytime;
              END;
            END
          ELSE
            BEGIN
              IF PreferedLocation = '' THEN  //LS-8553
                PreferedLocation := COSourcingLocations."Sourcing Location";
              //LS-8553 LocationFound := TRUE;
            END;
        //LS-8553 -
        END ELSE BEGIN
          IF SourceAllItems THEN
            IF pCOSourcingBuffer.FINDFIRST THEN
              pCOSourcingBuffer.DELETE;
        END
        //LS-8553 +
      //LS-8553 UNTIL (COSourcingLocations.NEXT = 0) OR LocationFound;
      UNTIL COSourcingLocations.NEXT = 0;

      EXIT(PreferedLocation);
    END;

    LOCAL PROCEDURE QueryInventory@10014503(VAR pCOLineTemp@10011500 : TEMPORARY Record 10016652;VAR pCOHeaderTemp@10014505 : TEMPORARY Record 10016651;VAR pCOSourcingBuffer@10014503 : TEMPORARY Record 10016665;SourcingLocation@10014504 : 'Current Location,Endless Aisles');
    VAR
      ItemUnitofMeasure@10014502 : Record 5404;
      Store@10014506 : Record 99001470;
      QReplenInventory@10014501 : Query 10016650;
      SourcingLocations@10014507 : Text;
      ModifyExisting@10014500 : Boolean;
    BEGIN
      //LS-8342 -
      IF SourcingLocation = SourcingLocation::"Current Location" THEN BEGIN
        Store.GET(pCOHeaderTemp."Store No.");
        SourcingLocations := Store."Location Code";
      END ELSE
        SourcingLocations := SourcingLocationsFilter(pCOHeaderTemp."Store No.",pCOHeaderTemp);
      //LS-8342 +

      IF SourcingLocations <> '' THEN BEGIN //LS-8342
        pCOSourcingBuffer.DELETEALL;
        pCOLineTemp.SETRANGE("Document Id",pCOHeaderTemp."Document Id");
        pCOLineTemp.SETRANGE("Line Type",pCOLineTemp."Line Type"::Item);
        IF pCOLineTemp.FINDSET THEN
          REPEAT
            IF pCOLineTemp."Unit of Measure Code" <> '' THEN BEGIN
              ItemUnitofMeasure.GET(pCOLineTemp.Number,pCOLineTemp."Unit of Measure Code");
              pCOLineTemp.Quantity := pCOLineTemp.Quantity * ItemUnitofMeasure."Qty. per Unit of Measure";
            END;
            QReplenInventory.SETFILTER(ItemFilter,pCOLineTemp.Number);
            //IF pCOLineTemp."Variant Code" <> '' THEN //LS-9286
            QReplenInventory.SETFILTER(VariantFilter,pCOLineTemp."Variant Code");

            //LS-8342 IF SourcingLocation = SourcingLocation::"Current Location" THEN BEGIN
            //LS-8342   Store.GET(pCOHeaderTemp."Store No.");
            //LS-8342   QReplenInventory.SETFILTER(LocationFilter,Store."Location Code");
            //LS-8342 END ELSE
            //LS-8342   QReplenInventory.SETFILTER(LocationFilter,SourcingLocationsFilter(pCOHeaderTemp."Store No."));

            QReplenInventory.SETFILTER(LocationFilter,SourcingLocations);  //LS-8342
            QReplenInventory.OPEN;
            WHILE QReplenInventory.READ DO
              IF QReplenInventory.Sum_Remaining_Quantity >= pCOLineTemp.Quantity THEN BEGIN
                ModifyExisting := FALSE;
                IF pCOSourcingBuffer.GET(QReplenInventory.Location_Code,QReplenInventory.Item_No,pCOLineTemp."Variant Code") THEN
                  ModifyExisting := TRUE
                ELSE
                  pCOSourcingBuffer.INIT;
                pCOSourcingBuffer.Location := QReplenInventory.Location_Code;
                pCOSourcingBuffer."Item No." := QReplenInventory.Item_No;
                pCOSourcingBuffer."Variant Code" := pCOLineTemp."Variant Code";
                pCOSourcingBuffer.Inventory := pCOSourcingBuffer.Inventory + QReplenInventory.Sum_Remaining_Quantity;
                IF ModifyExisting THEN
                  pCOSourcingBuffer.MODIFY
                ELSE
                pCOSourcingBuffer.INSERT;
              END;
          UNTIL pCOLineTemp.NEXT = 0;
      END;  //LS-8342
    END;

    LOCAL PROCEDURE SourcingLocationsFilter@10014582(pPickupStore@10014580 : Code[10];VAR pCOHeaderTemp@10014503 : TEMPORARY Record 10016651) : Text;
    VAR
      COSourcingLocations@10014501 : Record 10016664;
      LocationFilter@10014502 : Text;
    BEGIN
      COSourcingLocations.RESET;
      LocationFilter := '';
      //LS-8342 -
      COSourcingLocations.SETRANGE("Delivery Store",pPickupStore);
      //LS-9495 -
      IF pCOHeaderTemp."Inventory Transfer" THEN
        BEGIN
          COSourcingLocations.SETRANGE("Orders can be Collected");
          COSourcingLocations.SETRANGE("Will Ship orders");
        END
      ELSE
      //LS-9495 +
        IF pCOHeaderTemp."Ship Order" THEN BEGIN
          COSourcingLocations.SETRANGE("Will Ship orders",TRUE);
          COSourcingLocations.SETRANGE("Orders can be Collected");
        END ELSE BEGIN
          COSourcingLocations.SETRANGE("Orders can be Collected",TRUE);
          COSourcingLocations.SETRANGE("Will Ship orders");
        END;

      //LS-8342 +
      IF COSourcingLocations.FINDSET THEN
        REPEAT
          LocationFilter += '|' + COSourcingLocations."Sourcing Location";
        UNTIL COSourcingLocations.NEXT = 0;

      IF STRLEN(LocationFilter) > 1 THEN  //LS-8342
        EXIT(COPYSTR(LocationFilter,2));

      EXIT('');  //LS-8342
    END;

    PROCEDURE CreateTOfromCO@10014504(pCustomerOrderHeader@10014500 : Record 10016651;VAR pErrorCode@10014504 : Code[30];VAR pErrorText@10014501 : Text) : Boolean;
    VAR
      CustomerOrderLine@10014502 : Record 10016652;
      TransferHeader@10014505 : Record 5740;
      Store@10014508 : Record 99001470;
      SourcingLocation@10014503 : Text[20];
      Text002@10014507 : TextConst 'ENU=Unable to create Transfer Order for Customer Order %1';
    BEGIN
      //Create Transfer Orders from Customer Order
      OnBeforeCreateTransferFromCustomerOrder(pCustomerOrderHeader);
      Store.GET(pCustomerOrderHeader."Store No.");
      IF pCustomerOrderHeader."Sourcing Location" <> '' THEN
        BEGIN
          IF NOT TransferOrderCreate(pCustomerOrderHeader,pCustomerOrderHeader."Sourcing Location",TransferHeader) THEN
            BEGIN
              pErrorCode := '2301';
              pErrorText := STRSUBSTNO(Text002,pCustomerOrderHeader."Document Id");
            END;
        END
      ELSE
        BEGIN
          CustomerOrderLine.SETRANGE("Document Id",pCustomerOrderHeader."Document Id");
          CustomerOrderLine.SETCURRENTKEY("Sourcing Location");
          CustomerOrderLine.SETASCENDING("Sourcing Location",TRUE);
          SourcingLocation := '';
          IF CustomerOrderLine.FINDSET THEN
            REPEAT
              IF SourcingLocation <> CustomerOrderLine."Sourcing Location" THEN
                TransferOrderCreate(pCustomerOrderHeader,CustomerOrderLine."Sourcing Location",TransferHeader);
              SourcingLocation := CustomerOrderLine."Sourcing Location";
            UNTIL CustomerOrderLine.NEXT = 0
          ELSE
            BEGIN
              pErrorCode := '2302';
              pErrorText := STRSUBSTNO(Text002,pCustomerOrderHeader."Document Id");
              EXIT(FALSE);
            END;
        END;

      UpdateRetailMessage(pCustomerOrderHeader."Document Id",0);
      OnAfterCreateTransferFromCustomerOrder(TransferHeader);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE TransferOrderCreate@10014505(pCustomerOrderHeader@10014500 : Record 10016651;pSourcingLocation@10014504 : Code[10];VAR TransferHeader@10014501 : Record 5740) : Boolean;
    VAR
      CustomerOrderLine@10014503 : Record 10016652;
      Store@10014505 : Record 99001470;
      TransferLine@10014502 : Record 5741;
      LineNo@10014507 : Integer;
    BEGIN
      //Create transfer order
      IF pCustomerOrderHeader."Sourcing Location" = '' THEN
        CustomerOrderLine.SETRANGE("Sourcing Location",pSourcingLocation);

      TransferHeader.INIT;
      TransferHeader."No." := '';
      TransferHeader.INSERT(TRUE);
      IF Store.FindStore(pSourcingLocation,Store) THEN
        TransferHeader.VALIDATE("Store-from",Store."No.");
      TransferHeader.VALIDATE("Transfer-from Code",pSourcingLocation);
      //LS-8813 -
      IF pCustomerOrderHeader."Inventory Transfer" THEN
        TransferHeader.VALIDATE("Store-to",pCustomerOrderHeader."Created at Store")
      ELSE
      //LS-8813 +
        TransferHeader.VALIDATE("Store-to",pCustomerOrderHeader."Store No.");
      TransferHeader.TESTFIELD("Transfer-to Code");
      Store.GET(pCustomerOrderHeader."Store No.");
      TransferHeader."In-Transit Code" := Store."In-Transit Code";
      TransferHeader."Customer Order Ext. Doc. No." := pCustomerOrderHeader."Document Id";
      TransferHeader.MODIFY;
      LineNo := 10000;
      CustomerOrderLine.SETRANGE("Document Id",pCustomerOrderHeader."Document Id");
      IF CustomerOrderLine.FINDFIRST THEN
        REPEAT
          TransferLine.INIT;
          TransferLine."Document No." := TransferHeader."No.";
          TransferLine."Line No." := LineNo;
          TransferLine.VALIDATE("Item No.",CustomerOrderLine.Number);
          TransferLine.VALIDATE("Variant Code",CustomerOrderLine."Variant Code");
          TransferLine.VALIDATE("Unit of Measure Code",CustomerOrderLine."Unit of Measure Code");
          TransferLine.VALIDATE(Quantity,CustomerOrderLine.Quantity);
          TransferLine.INSERT;
          LineNo += 10000;
        UNTIL CustomerOrderLine.NEXT = 0;

      TransferHeader.ChangeInfoStoreStatus(0);
      TransferHeader.MODIFY;
      //LS-8656  InStoreMgt.SendTransDocReq(TransferHeader);

      EXIT(TRUE);
    END;

    PROCEDURE UpdateRetailMessage@10014506(DocumentId@10014500 : Code[40];COStatus@10014504 : 'PendingTransfer,TransferShipped,TransferReceived');
    VAR
      CustomerOrderSetup@10014501 : Record 10016650;
      RetailMessageHeader@10014502 : Record 10016600;
      Text001_l@10014503 : TextConst 'ENU=Order %1 is pending Transfer';
      Text002_l@10014506 : TextConst 'ENU="Transfer has been shipped for Order %1 "';
    BEGIN
      //LS-7132
      CustomerOrderSetup.GET;
      IF CustomerOrderSetup."Use Retail Message" THEN
        BEGIN
          RetailMessageHeader.SETCURRENTKEY(Status,"Active From");
          RetailMessageHeader.SETRANGE(Status,RetailMessageHeader.Status::Active);
          RetailMessageHeader.SETFILTER("Active From",'<=%1',CURRENTDATETIME);
          RetailMessageHeader.SETRANGE("Action Code",CustomerOrderSetup."Action Codes");
          //LS-9161 RetailMessageHeader.SETRANGE("General Text 1",CustomerOrderHeader_p."Document Id");
          RetailMessageHeader.SETRANGE("General Text 1",DocumentId);  //LS-9161
          IF RetailMessageHeader.FINDFIRST THEN
            BEGIN
              IF COStatus = COStatus::PendingTransfer THEN
                RetailMessageHeader.Subject := STRSUBSTNO(Text001_l,DocumentId)
              ELSE
                RetailMessageHeader.Subject := STRSUBSTNO(Text002_l,DocumentId);
              RetailMessageHeader.MODIFY;
            END;
        END;
    END;

    LOCAL PROCEDURE GetPosTransLineNumber@10014502(pReceiptNumber@10014500 : Code[20]) : Integer;
    VAR
      POSTransLine@10014501 : Record 99008981;
    BEGIN
      //LS-7133
      POSTransLine.RESET;
      POSTransLine.SETRANGE("Receipt No.",pReceiptNumber);
      IF POSTransLine.FINDLAST THEN
        EXIT(POSTransLine."Line No." + 10000)
      ELSE
        EXIT(10000);
    END;

    PROCEDURE CreateCustOrderTempFromPOSTransaction@10013518(POSTransaction@10014500 : Record 99008980;VAR CustomerOrderHeaderTemp@10014501 : TEMPORARY Record 10016651;VAR CustomerOrderLineTemp@10014502 : TEMPORARY Record 10016652;VAR CustomerOrderDiscountLineTemp@10014503 : TEMPORARY Record 10016653) COWasCreated : Boolean;
    VAR
      POSTransLine_l@10014504 : Record 99008981;
      POSTransPeriodicDisc_l@10014510 : Record 99008943;
      MembershipCard_l@10014505 : Record 99009003;
      MemberContact_l@10014507 : Record 99009002;
      MemberAccount_l@10014506 : Record 99009001;
      Customer_l@10014508 : Record 18;
      ShiptoAddress_l@10014509 : Record 222;
      ItemVariant_l@10014511 : Record 5401;
      UnitofMeasure_l@10014512 : Record 204;
      COLine_Sourcing_Temp@10014513 : TEMPORARY Record 10016652;
      ItemUnitofMeasure@10014514 : Record 5404;
      COItemUnitofMeasure@10014515 : Record 5404;
      POSTransLine_Temp@10014516 : TEMPORARY Record 99008981;
    BEGIN
      //LS-8950 New function
      CustomerOrderHeaderTemp.RESET;
      CustomerOrderHeaderTemp.DELETEALL;
      CustomerOrderLineTemp.RESET;
      CustomerOrderLineTemp.DELETEALL;
      CustomerOrderDiscountLineTemp.RESET;
      CustomerOrderDiscountLineTemp.DELETEALL;
      POSTransLine_l.RESET;
      POSTransLine_l.SETRANGE("Receipt No.",POSTransaction."Receipt No.");
      POSTransLine_l.SETRANGE("Entry Type",POSTransLine_l."Entry Type"::Item);  //LS-9131
      POSTransLine_l.SETRANGE("Entry Status",0);
      POSTransLine_l.SETRANGE(Marked,TRUE);
      IF POSTransLine_l.FINDSET THEN BEGIN
        CustomerOrderHeaderTemp.INIT;
        CustomerOrderHeaderTemp."Document Id" := CREATEGUID;
        CustomerOrderHeaderTemp."Receipt No." := POSTransaction."Receipt No.";
        CustomerOrderHeaderTemp."Store No." := POSTransaction."Store No.";
        CustomerOrderHeaderTemp."Terminal No." := POSTransaction."POS Terminal No.";
        CustomerOrderHeaderTemp."Source Type" := 0;
        CustomerOrderHeaderTemp."Status Info" := CustomerOrderHeaderTemp."Status Info"::"Ready for Picking";
        CustomerOrderHeaderTemp.Status := CustomerOrderHeaderTemp.Status::Ready;
        CustomerOrderHeaderTemp."Sourcing Order" := CustomerOrderHeaderTemp."Sourcing Order"::Priority;
        CLEAR(MemberContact_l);
        CLEAR(MemberAccount_l);
        CLEAR(Customer_l);
        IF (POSTransaction."Member Card No." <> '') AND (MembershipCard_l.GET(POSTransaction."Member Card No.")) THEN BEGIN
          CustomerOrderHeaderTemp."Member Card No." := POSTransaction."Member Card No.";
          CustomerOrderHeaderTemp."Member Contact No." := MembershipCard_l."Contact No.";
          CustomerOrderHeaderTemp."Member Contact Name" := MembershipCard_l."Cardholder Name";
          IF MembershipCard_l."Cardholder Name" <> '' THEN
            CustomerOrderHeaderTemp."Full Name" := MembershipCard_l."Cardholder Name";
          IF MemberContact_l.GET(MembershipCard_l."Account No.",MembershipCard_l."Contact No.") THEN BEGIN
            IF CustomerOrderHeaderTemp."Full Name" = '' THEN
              CustomerOrderHeaderTemp."Full Name" := MemberContact_l.Name;
            CustomerOrderHeaderTemp."Member Contact Name" := MemberContact_l.Name;
            CustomerOrderHeaderTemp.Address := MemberContact_l.Address;
            CustomerOrderHeaderTemp."Address 2" := MemberContact_l."Address 2";
            CustomerOrderHeaderTemp.City := MemberContact_l.City;
            CustomerOrderHeaderTemp.County := MemberContact_l.County;
            CustomerOrderHeaderTemp."Post Code" := MemberContact_l."Post Code";
            CustomerOrderHeaderTemp."Country Region Code" := MemberContact_l.Country;
            CustomerOrderHeaderTemp."Phone No." := MemberContact_l."Phone No.";
            CustomerOrderHeaderTemp.Email := MemberContact_l."E-Mail";
            CustomerOrderHeaderTemp."Mobile Phone No." := MemberContact_l."Mobile Phone No.";
            CustomerOrderHeaderTemp."Daytime Phone No." := MemberContact_l."Phone No.";
          END;
          IF MemberAccount_l.GET(MembershipCard_l."Account No.") THEN
            IF (MemberAccount_l."Linked To Customer No." <> '') AND (Customer_l.GET(MembershipCard_l."Account No.")) THEN
              CustomerOrderHeaderTemp."Customer No." := Customer_l."No.";
        END;
        IF (POSTransaction."Customer No." <> '') AND (Customer_l."No." = '') THEN
          IF Customer_l.GET(POSTransaction."Customer No.") THEN
            CustomerOrderHeaderTemp."Customer No." := POSTransaction."Customer No.";

        IF Customer_l.Name <> '' THEN BEGIN
          IF CustomerOrderHeaderTemp."Full Name" = '' THEN
            CustomerOrderHeaderTemp."Full Name" := Customer_l.Name;
          ShiptoAddress_l.SETRANGE("Customer No.",CustomerOrderHeaderTemp."Customer No.");
          IF ShiptoAddress_l.COUNT = 1 THEN BEGIN
            ShiptoAddress_l.FINDFIRST;
            CustomerOrderHeaderTemp."Ship To Full Name" := ShiptoAddress_l.Name;
            CustomerOrderHeaderTemp."Ship To Address" := ShiptoAddress_l.Address;
            CustomerOrderHeaderTemp."Ship To Address 2" := ShiptoAddress_l."Address 2";
            CustomerOrderHeaderTemp."Ship To City" := ShiptoAddress_l.City;
            CustomerOrderHeaderTemp."Ship To County" := ShiptoAddress_l.County;
            CustomerOrderHeaderTemp."Ship To Post Code" := ShiptoAddress_l."Post Code";
            CustomerOrderHeaderTemp."Ship To Country Region Code" := ShiptoAddress_l."Country/Region Code";
            CustomerOrderHeaderTemp."Ship To Phone No." := ShiptoAddress_l."Phone No.";
            CustomerOrderHeaderTemp."Ship To Email" := ShiptoAddress_l."E-Mail";
          END
          ELSE BEGIN
            CustomerOrderHeaderTemp."Ship To Full Name" := CustomerOrderHeaderTemp."Full Name";
            CustomerOrderHeaderTemp."Ship To Address" := Customer_l.Address;
            CustomerOrderHeaderTemp."Ship To Address 2" := Customer_l."Address 2";
            CustomerOrderHeaderTemp."Ship To City" := Customer_l.City;
            CustomerOrderHeaderTemp."Ship To County" := Customer_l.County;
            CustomerOrderHeaderTemp."Ship To Post Code" := Customer_l."Post Code";
            CustomerOrderHeaderTemp."Ship To Country Region Code" := Customer_l."Country/Region Code";
            CustomerOrderHeaderTemp."Ship To Phone No." := Customer_l."Phone No.";
            CustomerOrderHeaderTemp."Ship To Email" := Customer_l."E-Mail";
          END;
        END;
        CustomerOrderHeaderTemp."Anonymous Order" := (CustomerOrderHeaderTemp."Member Contact No." = '');
        CustomerOrderHeaderTemp."Click And Collect Order" := TRUE;
        //LS-8998
        CustomerOrderHeaderTemp.INSERT;
        REPEAT
          CustomerOrderLineTemp.INIT;
          CustomerOrderLineTemp."Document Id" := CustomerOrderHeaderTemp."Document Id";
          CustomerOrderLineTemp."Line No." := POSTransLine_l."Line No.";
          CustomerOrderLineTemp.Status := CustomerOrderLineTemp.Status::"To Pick";
          CustomerOrderLineTemp."Line Type" := POSTransLine_l."Entry Type";
          CustomerOrderLineTemp.Number :=  POSTransLine_l.Number;
          CustomerOrderLineTemp."Variant Code" := POSTransLine_l."Variant Code";
          CustomerOrderLineTemp."Unit of Measure Code" := POSTransLine_l."Unit of Measure";
          CustomerOrderLineTemp."Net Price" := POSTransLine_l."Net Price";
          CustomerOrderLineTemp.Price := POSTransLine_l.Price;
          CustomerOrderLineTemp.Quantity := POSTransLine_l.Quantity;
          CustomerOrderLineTemp."Discount Amount" := POSTransLine_l."Discount Amount";
          CustomerOrderLineTemp."Discount Percent" := POSTransLine_l."Discount %";
          CustomerOrderLineTemp."Net Amount" := POSTransLine_l."Net Amount";
          CustomerOrderLineTemp."Vat Amount" := POSTransLine_l."VAT Amount";
          CustomerOrderLineTemp.Amount := POSTransLine_l.Amount;
          CustomerOrderLineTemp."Vat Prod. Posting Group" := POSTransLine_l."Vat Prod. Posting Group";
          CustomerOrderLineTemp."Item Description" := POSTransLine_l.Description;
          IF POSTransLine_l."Entry Type" = POSTransLine_l."Entry Type"::Item THEN BEGIN
            IF (POSTransLine_l."Variant Code" <> '') AND (ItemVariant_l.GET(POSTransLine_l.Number,POSTransLine_l."Variant Code")) THEN
              CustomerOrderLineTemp."Variant Description" := ItemVariant_l."Description 2";
            IF (POSTransLine_l."Unit of Measure" <> '') AND (UnitofMeasure_l.GET(POSTransLine_l."Unit of Measure")) THEN
              CustomerOrderLineTemp."UoM Description" := UnitofMeasure_l.Description;
          END;
          CustomerOrderLineTemp."Original Line No." := POSTransLine_l."Orig. Trans. Line No.";
          CustomerOrderLineTemp.INSERT;
        UNTIL POSTransLine_l.NEXT = 0;
        POSTransPeriodicDisc_l.RESET;
        POSTransPeriodicDisc_l.SETRANGE("Receipt No.",POSTransaction."Receipt No.");
        IF POSTransPeriodicDisc_l.FINDSET THEN REPEAT
          CustomerOrderDiscountLineTemp."Document Id" := CustomerOrderHeaderTemp."Document Id";
          CustomerOrderDiscountLineTemp."Line No." := POSTransPeriodicDisc_l."Line No.";
          CustomerOrderDiscountLineTemp."Entry No." := POSTransPeriodicDisc_l."No.";
          CustomerOrderDiscountLineTemp."Discount Type" := POSTransPeriodicDisc_l.DiscType;
          CustomerOrderDiscountLineTemp."Offer No." := POSTransPeriodicDisc_l."Offer No.";
          CustomerOrderDiscountLineTemp."Periodic Disc. Type" := POSTransPeriodicDisc_l."Periodic Disc. Type";
          CustomerOrderDiscountLineTemp."Periodic Disc. Group" := POSTransPeriodicDisc_l."Periodic Disc. Group";
          CustomerOrderDiscountLineTemp."Discount Percent" := POSTransPeriodicDisc_l."Discount %";
          CustomerOrderDiscountLineTemp."Discount Amount" := POSTransPeriodicDisc_l."Discount Amount";
          CustomerOrderDiscountLineTemp.INSERT;
        UNTIL POSTransPeriodicDisc_l.NEXT = 0;
        //LS-9153 -
        IF CustomerOrderLineTemp.FINDSET THEN REPEAT
          COLine_Sourcing_Temp.RESET;
          COLine_Sourcing_Temp.SETRANGE(Number,CustomerOrderLineTemp.Number);
          COLine_Sourcing_Temp.SETRANGE("Variant Code",CustomerOrderLineTemp."Variant Code");
          IF COLine_Sourcing_Temp.FINDFIRST THEN BEGIN
            IF COLine_Sourcing_Temp."Unit of Measure Code" = CustomerOrderLineTemp."Unit of Measure Code" THEN
              COLine_Sourcing_Temp.Quantity += CustomerOrderLineTemp.Quantity
            ELSE BEGIN
              //LS-8813 ItemUnitofMeasure.GET(COLine_Sourcing_Temp.Number,COLine_Sourcing_Temp."Unit of Measure Code");
              IF ItemUnitofMeasure.GET(COLine_Sourcing_Temp.Number,COLine_Sourcing_Temp."Unit of Measure Code") THEN BEGIN//LS-8813
                COItemUnitofMeasure.GET(CustomerOrderLineTemp.Number,CustomerOrderLineTemp."Unit of Measure Code");
                COLine_Sourcing_Temp.Quantity += ((COItemUnitofMeasure."Qty. per Unit of Measure"/ItemUnitofMeasure."Qty. per Unit of Measure") * POSTransLine_Temp.Quantity);
              END ELSE
                COLine_Sourcing_Temp.Quantity += ((COItemUnitofMeasure."Qty. per Unit of Measure"/1) * POSTransLine_Temp.Quantity);  //LS-8813
            END;
            COLine_Sourcing_Temp.MODIFY;
          END ELSE BEGIN
            COLine_Sourcing_Temp.RESET;
            COLine_Sourcing_Temp.INIT;
            COLine_Sourcing_Temp."Document Id" := CustomerOrderLineTemp."Document Id";
            COLine_Sourcing_Temp."Line No." := CustomerOrderLineTemp."Line No.";
            COLine_Sourcing_Temp."Line Type" := CustomerOrderLineTemp."Line Type"::Item;
            COLine_Sourcing_Temp.Number :=  CustomerOrderLineTemp.Number;
            COLine_Sourcing_Temp."Variant Code" := CustomerOrderLineTemp."Variant Code";
            COLine_Sourcing_Temp.Quantity := CustomerOrderLineTemp.Quantity;
            COLine_Sourcing_Temp."Unit of Measure Code" := CustomerOrderLineTemp."Unit of Measure Code";
            COLine_Sourcing_Temp.INSERT;
          END;
        UNTIL CustomerOrderLineTemp.NEXT = 0;
        //LS-9153+
        COWasCreated := TRUE;
      END
      ELSE
        COWasCreated := FALSE;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertCustomerOrderHeader@10014507(VAR CustomerOrderHeader@10014500 : Record 10016651);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertCustomerOrderLine@10014508(VAR CustomerOrderLine@10014500 : Record 10016652);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertCustomerOrderDiscountLine@10014509(VAR CustomerOrderDiscountLine@10014500 : Record 10016653);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertCustomerOrderPaymentLine@10014510(VAR CustomerOrderPayment@10014500 : Record 10016658);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostCustomerOrder@10014511(VAR CustomerOrderHeader@10014500 : Record 10016651);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostCustomerOrder@10014512(VAR PostedCustomerOrderHeader@10014500 : Record 10016655);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertItemPosTransLine@10014513(VAR POSTransLine@10014500 : Record 99008981);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertPosIncomeExpenceTransLine@10014514(VAR POSTransLine@10014500 : Record 99008981);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreatePosTrans@10014515(VAR POSTransaction@10014500 : Record 99008980);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateTransferFromCustomerOrder@10014516(VAR CustomerOrderHeader@10014500 : Record 10016651);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateTransferFromCustomerOrder@10014517(VAR TransferHeader@10014500 : Record 5740);
    BEGIN
    END;

    PROCEDURE LookupOrder@10014520(pDocumentId@1100409002 : Code[40];pTerminalNo@1100409004 : Code[10];VAR pCOHeaderTemp@1100409006 : TEMPORARY Record 10016651;VAR pCOLineTemp@1100409003 : TEMPORARY Record 10016652;VAR pCODiscLineTemp@1100409005 : TEMPORARY Record 10016653;VAR pCOPaymentTemp@10014500 : TEMPORARY Record 10016658;VAR pErrorCode@1100409001 : Code[30];VAR pErrorText@1100409000 : Text) : Boolean;
    VAR
      CustomerOrderHeader@10014501 : Record 10016651;
      PostedCustomerOrderHeader@10014502 : Record 10016655;
      lText001@10014507 : TextConst 'ENU=%1 ''%2'' not found.';
      lText005@10014503 : TextConst 'ENU=%1 ''%2'' has already been processed';
      CustomerOrderLine@10014504 : Record 10016652;
      CustomerOrderPayment@10014505 : Record 10016658;
      CustomerOrderDiscountLine@10014506 : Record 10016653;
    BEGIN
      //LS-7133
      IF NOT CustomerOrderHeader.GET(pDocumentId) THEN
        IF PostedCustomerOrderHeader.GET(pDocumentId) THEN BEGIN
          pErrorCode := '2241';
          pErrorText := STRSUBSTNO(lText005,CustomerOrderHeader.TABLECAPTION,pDocumentId);
          EXIT(FALSE);
        END ELSE BEGIN
          pErrorCode := '2240';
          pErrorText := STRSUBSTNO(lText001,CustomerOrderHeader.TABLECAPTION,pDocumentId);
          EXIT(FALSE);
        END;

      pCOHeaderTemp.INIT;
      pCOHeaderTemp := CustomerOrderHeader;
      pCOHeaderTemp.INSERT;

      CustomerOrderLine.RESET;
      CustomerOrderLine.SETRANGE("Document Id",CustomerOrderHeader."Document Id");
      IF CustomerOrderLine.FINDSET THEN REPEAT
        pCOLineTemp.INIT;
        pCOLineTemp := CustomerOrderLine;
        pCOLineTemp.INSERT;

        CustomerOrderDiscountLine.RESET;
        CustomerOrderDiscountLine.SETRANGE("Document Id",CustomerOrderLine."Document Id");
        CustomerOrderDiscountLine.SETRANGE("Line No.",CustomerOrderLine."Line No.");
        IF CustomerOrderDiscountLine.FINDSET THEN REPEAT
          pCODiscLineTemp.INIT;
          pCODiscLineTemp := CustomerOrderDiscountLine;
          pCODiscLineTemp.INSERT;
        UNTIL CustomerOrderDiscountLine.NEXT = 0;
      UNTIL CustomerOrderLine.NEXT = 0;

      CustomerOrderPayment.RESET;
      CustomerOrderPayment.SETRANGE("Document Id",CustomerOrderHeader."Document Id");
      IF CustomerOrderPayment.FINDSET THEN REPEAT
        pCOPaymentTemp.INIT;
        pCOPaymentTemp := CustomerOrderPayment;
        pCOPaymentTemp.INSERT;
      UNTIL CustomerOrderPayment.NEXT = 0;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ValidateMemberCard@10014521(CustomerOrderHeader_p@10014502 : Record 10016651;CardNumber@10014500 : Text[100]) : Text;
    VAR
      MembershipCard@10014501 : Record 99009003;
      CardNotFound@10014503 : TextConst 'ENU=Member card %1 not found';
      CardNotActive@10014504 : TextConst 'ENU=Member card %1 not active';
      CardExpired@10014505 : TextConst 'ENU=Member card %1 has expired';
    BEGIN
      //LS-8704
      IF NOT MembershipCard.GET(CardNumber) THEN
        EXIT(STRSUBSTNO(CardNotFound,CardNumber));

      IF MembershipCard.Status <> MembershipCard.Status::Active THEN
        EXIT(STRSUBSTNO(CardNotActive,CardNumber));

      IF (MembershipCard."Last Valid Date" < DT2DATE(CustomerOrderHeader_p."Document DateTime")) AND (MembershipCard."Last Valid Date" <> 0D) THEN
        EXIT(STRSUBSTNO(CardExpired,CardNumber));

      EXIT('');
    END;

    PROCEDURE SalesOrder_LoyaltyPoint_Posting@10016519(CustomerOrderHeader_p@10014503 : Record 10016651;VAR CustomerOrderPayment_p@10014500 : Record 10016658);
    VAR
      MemberPointJnlLine@10014501 : Record 99009010;
      MembershipCard@10014504 : Record 99009003;
      MemberAccount@10014505 : Record 99009001;
      PointJnlPostLine@10014506 : Codeunit 99009008;
    BEGIN
      //LS-8704
      MembershipCard.GET(CustomerOrderPayment_p."Card or Customer number");
      IF MemberAccount.GET(MembershipCard."Account No.") THEN BEGIN
        MemberPointJnlLine.INIT;
        IF CustomerOrderPayment_p."Pre Approved Amount" < 1 THEN
          MemberPointJnlLine.Type := MemberPointJnlLine.Type::"Pos. Adjustment"
        ELSE
          MemberPointJnlLine.Type := MemberPointJnlLine.Type::Redemption;
        MemberPointJnlLine.Date := DT2DATE(CustomerOrderHeader_p."Document DateTime");
        MemberPointJnlLine."Document No." := CustomerOrderHeader_p."Document Id";
        MemberPointJnlLine."Contact No" := CustomerOrderHeader_p."Member Contact No.";
        MemberPointJnlLine.VALIDATE("Account No.",MemberAccount."No.");
        MemberPointJnlLine.VALIDATE(Points,ABS(CustomerOrderPayment_p."Pre Approved Amount"));
        MemberPointJnlLine."Source Type" := MemberPointJnlLine."Source Type"::"Sales Invoice";
        MemberPointJnlLine."Store No." := CustomerOrderHeader_p."Store No.";
        MemberPointJnlLine."POS Terminal No." := CustomerOrderHeader_p."Terminal No.";
        MemberPointJnlLine."Card No." := CustomerOrderPayment_p."Card or Customer number";
        PointJnlPostLine.RUN(MemberPointJnlLine);
        CustomerOrderPayment_p."Finalised Amount" := CustomerOrderPayment_p."Pre Approved Amount";
      END;
    END;

    PROCEDURE CoLineBuffer@10014524(VAR CustomerOrderLineTemp_In@10014500 : TEMPORARY Record 10016652;VAR CustomerOrderLineTemp_Out@10014501 : TEMPORARY Record 10016652);
    VAR
      ItemUnitofMeasure_In@10014502 : Record 5404;
      ItemUnitofMeasure_Out@10014503 : Record 5404;
      IUOM_In@10014504 : Decimal;
      IUOM_Out@10014505 : Decimal;
    BEGIN
      //LS-8813
      CustomerOrderLineTemp_In.RESET;
      IF CustomerOrderLineTemp_In.FINDSET THEN REPEAT
        CustomerOrderLineTemp_Out.SETRANGE("Document Id",CustomerOrderLineTemp_In."Document Id");
        CustomerOrderLineTemp_Out.SETRANGE(Number,CustomerOrderLineTemp_In.Number);
        CustomerOrderLineTemp_Out.SETRANGE("Variant Code",CustomerOrderLineTemp_In."Variant Code");
        IF CustomerOrderLineTemp_Out.FINDFIRST THEN BEGIN
          IF CustomerOrderLineTemp_In."Unit of Measure Code" <> '' THEN BEGIN
            ItemUnitofMeasure_In.GET(CustomerOrderLineTemp_In.Number,CustomerOrderLineTemp_In."Unit of Measure Code");
            IUOM_In := ItemUnitofMeasure_In."Qty. per Unit of Measure";
          END ELSE
            IUOM_In := 1;
          IF CustomerOrderLineTemp_Out."Unit of Measure Code" <> '' THEN BEGIN
            ItemUnitofMeasure_Out.GET(CustomerOrderLineTemp_Out.Number,CustomerOrderLineTemp_Out."Unit of Measure Code");
            IUOM_Out := ItemUnitofMeasure_Out."Qty. per Unit of Measure";
          END ELSE
            IUOM_Out := 1;

          CustomerOrderLineTemp_Out.Quantity += (CustomerOrderLineTemp_In.Quantity * IUOM_In) / IUOM_Out;
          CustomerOrderLineTemp_Out.MODIFY;
        END ELSE BEGIN
          CustomerOrderLineTemp_Out.INIT;
          CustomerOrderLineTemp_Out := CustomerOrderLineTemp_In;
          CustomerOrderLineTemp_Out.INSERT;
        END;
      UNTIL CustomerOrderLineTemp_In.NEXT = 0;
      CustomerOrderLineTemp_Out.RESET;
    END;

    LOCAL PROCEDURE TransferOrderReady@10014526(CustomerOrderHeader_p@10014500 : Record 10016651) : Boolean;
    VAR
      TransferHeader@10014501 : Record 5740;
    BEGIN
      //LS-8813
      //Don't show CO's if Store is waiting for Transfer from Warehouse
      TransferHeader.SETRANGE("Customer Order Ext. Doc. No.",CustomerOrderHeader_p."Document Id");
      IF TransferHeader."Retail Status" = TransferHeader."Retail Status"::Sent THEN
        IF TransferHeader."Store-to" = CustomerOrderHeader_p."Store No." THEN
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PostTransferShip@10016521(VAR pDocumentId@10014500 : Code[40];VAR pErrorText@10014501 : Text);
    VAR
      TransferHeader@10014502 : Record 5740;
      TransferShipmentHeader@10014505 : Record 5744;
      TransferPostShipment@10014503 : Codeunit 5704;
      TransferShipmentError@10014504 : TextConst 'ENU=Unable to Post Transfer shipment.  Transfer order %1.';
    BEGIN
      //LS-8813
      TransferHeader.RESET;
      TransferHeader.SETRANGE("Customer Order Ext. Doc. No.",pDocumentId);
      IF TransferHeader.FINDFIRST THEN BEGIN
        TransferPostShipment.SetHideValidationDialog(TRUE);
        TransferPostShipment.RUN(TransferHeader);
      END ELSE BEGIN
        TransferShipmentHeader.SETCURRENTKEY("Customer Order Ext. Doc. No.");
        TransferShipmentHeader.SETRANGE("Customer Order Ext. Doc. No.",pDocumentId);
        IF TransferShipmentHeader.ISEMPTY THEN
          pErrorText := STRSUBSTNO(TransferShipmentError,TransferHeader."No.");
      END;
    END;

    LOCAL PROCEDURE PostTransferReceive@10014525(VAR pDocumentId@10014500 : Code[40];VAR pErrorText@10014501 : Text);
    VAR
      TransferHeader@10014502 : Record 5740;
      TransferReceiptHeader@10014505 : Record 5746;
      TransferOrderPostReceipt@10014503 : Codeunit 5705;
      TransferReceiveError@10014504 : TextConst 'ENU=Unable to Post Transfer receive.  Transfer order %1.';
    BEGIN
      //LS-8813
      TransferHeader.RESET;
      TransferHeader.SETRANGE("Customer Order Ext. Doc. No.",pDocumentId);
      IF TransferHeader.FINDFIRST THEN BEGIN
        TransferOrderPostReceipt.SetHideValidationDialog(TRUE);
        TransferOrderPostReceipt.RUN(TransferHeader);
      END ELSE BEGIN
        TransferReceiptHeader.SETCURRENTKEY("Customer Order Ext. Doc. No.");
        TransferReceiptHeader.SETRANGE("Customer Order Ext. Doc. No.",pDocumentId);
        IF TransferReceiptHeader.ISEMPTY THEN
          pErrorText := STRSUBSTNO(TransferReceiveError,TransferHeader."No.");
      END;
    END;

    PROCEDURE ValidateMessageSetup@10014527(CustomerOrderHeader_p@10014500 : Record 10016651;VAR ErrorCode_p@10014501 : Code[40];VAR ErrorText_p@10014502 : Text) : Boolean;
    VAR
      lText001@10014503 : TextConst 'ENU=SMTP Mail Setup is missing';
      lText002@10014504 : TextConst 'ENU=The Omni Service URI has not been set in functionality profile';
      SMTPMailSetup@10014506 : Record 409;
      PosFuncProfile@10014507 : Record 99001515;
      SMTPMailSetupOK@10014505 : Boolean;
      POSFunc@10014509 : Codeunit 99008900;
      PosSession@10014510 : Codeunit 99008919;
    BEGIN
      //LS-9161
      IF CustomerOrderHeader_p."Source Type" = 0 THEN BEGIN  //Customer order created at stationary POS
        SMTPMailSetup.GET;
        SMTPMailSetupOK := FALSE;
        IF SMTPMailSetup."SMTP Server" <> '' THEN
          IF SMTPMailSetup."User ID" <> '' THEN
            IF POSFunc.CheckValidEmailAddresses(SMTPMailSetup."User ID") THEN
              SMTPMailSetupOK := TRUE;

        IF NOT SMTPMailSetupOK THEN BEGIN
          ErrorCode_p := '2253';
          ErrorText_p := lText001;
          EXIT(FALSE);
        END;
      END ELSE BEGIN  //OMNI Message channel
        PosFuncProfile.GET(PosSession.FunctionalityProfileID);
        IF PosFuncProfile."Omni Ext. Service URI" = '' THEN BEGIN
          ErrorCode_p := '2250';
          ErrorText_p := lText002;
          EXIT(FALSE);
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE UpdateOrderLines@10014530(VAR POSTransaction@10014500 : Record 99008980;VAR CustomerOrderLineTemp@10014501 : Record 10016652;VAR CustomerOrderDiscountLineTemp@10014502 : Record 10016653;VAR CustomerOrderHeaderTemp@10014503 : Record 10016651);
    VAR
      POSTransLine_l@10014504 : Record 99008981;
      POSTransPeriodicDisc_l@10014505 : Record 99008943;
      ItemVariant_l@10014506 : Record 5401;
      UnitofMeasure_l@10014507 : Record 204;
      PosFunc@10014508 : Codeunit 99008900;
    BEGIN
      //LS-9153
      CustomerOrderLineTemp.RESET;
      CustomerOrderLineTemp.DELETEALL;
      CustomerOrderDiscountLineTemp.RESET;
      CustomerOrderDiscountLineTemp.DELETEALL;
      POSTransLine_l.RESET;
      POSTransLine_l.SETRANGE("Receipt No.",POSTransaction."Receipt No.");
      POSTransLine_l.SETRANGE("Entry Type",POSTransLine_l."Entry Type"::Item);  //LS-9131
      POSTransLine_l.SETRANGE("Entry Status",0);
      POSTransLine_l.SETRANGE(Marked,TRUE);
      IF POSTransLine_l.FINDSET THEN BEGIN
        REPEAT
          CustomerOrderLineTemp.INIT;
          CustomerOrderLineTemp."Document Id" := CustomerOrderHeaderTemp."Document Id";
          CustomerOrderLineTemp."Line No." := POSTransLine_l."Line No.";
          CustomerOrderLineTemp.Status := CustomerOrderLineTemp.Status::"To Pick";
          CustomerOrderLineTemp."Line Type" := POSTransLine_l."Entry Type";
          CustomerOrderLineTemp.Number :=  POSTransLine_l.Number;
          CustomerOrderLineTemp."Variant Code" := POSTransLine_l."Variant Code";
          CustomerOrderLineTemp."Unit of Measure Code" := POSTransLine_l."Unit of Measure";
          CustomerOrderLineTemp."Net Price" := POSTransLine_l."Net Price";
          CustomerOrderLineTemp.Price := POSTransLine_l.Price;
          CustomerOrderLineTemp.Quantity := POSTransLine_l.Quantity;
          CustomerOrderLineTemp."Discount Amount" := POSTransLine_l."Discount Amount";
          CustomerOrderLineTemp."Discount Percent" := POSTransLine_l."Discount %";
          CustomerOrderLineTemp."Net Amount" := POSTransLine_l."Net Amount";
          CustomerOrderLineTemp."Vat Amount" := POSTransLine_l."VAT Amount";
          CustomerOrderLineTemp.Amount := POSTransLine_l.Amount;
          CustomerOrderLineTemp."Vat Prod. Posting Group" := POSTransLine_l."Vat Prod. Posting Group";
          CustomerOrderLineTemp."Item Description" := POSTransLine_l.Description;
          IF POSTransLine_l."Entry Type" = POSTransLine_l."Entry Type"::Item THEN BEGIN
            IF (POSTransLine_l."Variant Code" <> '') AND (ItemVariant_l.GET(POSTransLine_l.Number,POSTransLine_l."Variant Code")) THEN
              CustomerOrderLineTemp."Variant Description" := ItemVariant_l."Description 2";
            IF (POSTransLine_l."Unit of Measure" <> '') AND (UnitofMeasure_l.GET(POSTransLine_l."Unit of Measure")) THEN
              CustomerOrderLineTemp."UoM Description" := UnitofMeasure_l.Description;
          END;
          CustomerOrderLineTemp."Original Line No." := POSTransLine_l."Orig. Trans. Line No.";
          CustomerOrderLineTemp.INSERT;
        UNTIL POSTransLine_l.NEXT = 0;
        POSTransPeriodicDisc_l.RESET;
        POSTransPeriodicDisc_l.SETRANGE("Receipt No.",POSTransaction."Receipt No.");
        PosFunc.PosTransDiscSetTableFilter(1,POSTransPeriodicDisc_l);
        IF PosFunc.PosTransDiscFindSetRec(1,POSTransPeriodicDisc_l) THEN BEGIN
          REPEAT
            CustomerOrderDiscountLineTemp."Document Id" := CustomerOrderHeaderTemp."Document Id";
            CustomerOrderDiscountLineTemp."Line No." := POSTransPeriodicDisc_l."Line No.";
            CustomerOrderDiscountLineTemp."Entry No." := POSTransPeriodicDisc_l."No.";
            CustomerOrderDiscountLineTemp."Discount Type" := POSTransPeriodicDisc_l.DiscType;
            CustomerOrderDiscountLineTemp."Offer No." := POSTransPeriodicDisc_l."Offer No.";
            CustomerOrderDiscountLineTemp."Periodic Disc. Type" := POSTransPeriodicDisc_l."Periodic Disc. Type";
            CustomerOrderDiscountLineTemp."Periodic Disc. Group" := POSTransPeriodicDisc_l."Periodic Disc. Group";
            CustomerOrderDiscountLineTemp."Discount Percent" := POSTransPeriodicDisc_l."Discount %";
            CustomerOrderDiscountLineTemp."Discount Amount" := POSTransPeriodicDisc_l."Discount Amount";
            CustomerOrderDiscountLineTemp.INSERT;
          UNTIL PosFunc.PosTransDiscNextRec(1,1,POSTransPeriodicDisc_l) = 0;
        END;
      END;
    END;

    PROCEDURE GetPosTransShipmentCost@10014528(VAR CustomerOrderHeader_p@10014500 : TEMPORARY Record 10016651) : Decimal;
    VAR
      POSTransLine@10014501 : Record 99008981;
      Store@10014502 : Record 99001470;
      TransactionHeader@10014503 : Record 99001472;
      TransSalesEntry@10014504 : Record 99001473;
    BEGIN
      //LS-9250
      IF Store.GET(CustomerOrderHeader_p."Store No.") THEN BEGIN
        POSTransLine.RESET;
        POSTransLine.SETRANGE("Receipt No.",CustomerOrderHeader_p."Receipt No.");
        POSTransLine.SETRANGE("Entry Type",POSTransLine."Entry Type"::Item);
        POSTransLine.SETRANGE(Number,Store."Web Store Shipping Cost Item");
        IF POSTransLine.FINDFIRST THEN
          EXIT(POSTransLine.Amount)
        ELSE BEGIN
          TransactionHeader.RESET;
          TransactionHeader.SETCURRENTKEY("Receipt No.",Date);
          TransactionHeader.SETRANGE("Receipt No.",CustomerOrderHeader_p."Receipt No.");
          IF TransactionHeader.FINDFIRST THEN BEGIN
            TransSalesEntry.SETRANGE("Transaction No.",TransactionHeader."Transaction No.");
            TransSalesEntry.SETRANGE("Type of Sale",TransSalesEntry."Type of Sale"::"Item Sale");
            TransSalesEntry.SETRANGE("Item No.",Store."Web Store Shipping Cost Item");
            IF TransSalesEntry.FINDFIRST THEN
              EXIT(-TransSalesEntry."Total Rounded Amt.");
          END;
        END;
      END;

      EXIT(0);
    END;

    BEGIN
    {
      LS-2884 GH  Refactoring LoadMemberInformation
      LS-3405 ZBZ Posting Exception
      LS-4237 BLL Fix to avoid Overflow in Hours to Collect
      LS-4079 FA  Error when price customer order price/net price is 0
      LS-5357 CM  Added support for anonymous order.
      LS-5743 ThJ New extended web service to create more detailed Customer Order.
      LS-5986 BLL Create Sales Order from Customer Order.
      LS-6353 ZBZ Refactor Customer order to reflect Click&Collect functionality.
      LS-7133 ThJ Enable shipping of Click&Collect order.  Code cleanup according to coding guidelines
      LS-7132 ThJ Added functions CustomerOrderInventoryAvailability, QueryInventory and SourcingLocationsFilter
      LS-7132 AMS Added functions CreateTofromCo and TransferOrderCreate
      <<<<<<< HEAD
      LS-7898 ThJ Added published Events
      =======
      LS-8342 ThJ Filter inventory lookup by Ship og Collect
      >>>>>>> branch-a
      LS-8343 ThJ Added Receipt number to Customer order header.
      LS-8950 FO  Added function CreateCustOrderTempFromPOSTransaction
      LS-8553 ThJ Get List of Location able to source items
      LS-8711 ThJ Added "Trans. Store No." and "Trans. Terminal No." to Customer order header.
      LS-8706 ThJ Lookup List of ALL Customer Orders in Ready state
      LS-8656 ZBZ Remove Standalone Store InStore Documents
      LS-8707 ThJ Added function GetFilteredDocList
      LS-9074 AFTH Added membercontact handeling
      LS-9131 ThJ Filter POS Trans. lines on Items
      LS-8813 ThJ Transfer Inventory for Customer order collection.
      LS-9094 AFTH Prepaid order does not require payment
      LS-9171 SOS Filter on transfer orders
      LS-9094 AFTH  Prepaid order does not require payment
      LS-8998 AFTH Orders created as pos were being marked as click and collect orders. We want all orders ready to be picked to create a retail message.
      LS-8704 ThJ Loyalty points payment
      LS-9161 ThJ Retail message for Transfer Orders
      LS-8838 SOS Make sure the member contact info gets set for all orders.
      LS-9250 ThJ Get shipment cost for CO
      LS-8547 GH  - Use GetMemberInfoForPos instead of LoadMemberInformation
      LS-9289 ThJ Mark Variant Items through Barcode scanning
      LS-9324 ThJ Do not create Retail Message if CO is shipped from Warehouse
      LS-9495 ThJ Use Priority with Lead time in selecting Transfer Location for CO
      LS-9349 AFTH Prepayment fix after webpos refactor.
    }
    END.
  }
}
